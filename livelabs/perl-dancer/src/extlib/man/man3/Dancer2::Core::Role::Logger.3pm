.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dancer2::Core::Role::Logger 3"
.TH Dancer2::Core::Role::Logger 3 "2022-03-14" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer2::Core::Role::Logger \- Role for logger engines
.SH "VERSION"
.IX Header "VERSION"
version 0.400000
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Any class that consumes this role will be able to implement to write log messages.
.PP
In order to implement this role, the consumer \fBmust\fR implement the \f(CW\*(C`log\*(C'\fR
method. This method will receives as argument the \f(CW\*(C`level\*(C'\fR and the \f(CW\*(C`message\*(C'\fR.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "auto_encoding_charset"
.IX Subsection "auto_encoding_charset"
Charset to use when writing a message.
.SS "app_name"
.IX Subsection "app_name"
Name of the application. Can be used in the message.
.SS "log_format"
.IX Subsection "log_format"
This is a format string (or a preset name) to specify the log format.
.PP
The possible values are:
.ie n .IP "%h" 4
.el .IP "\f(CW%h\fR" 4
.IX Item "%h"
host emitting the request
.ie n .IP "%t" 4
.el .IP "\f(CW%t\fR" 4
.IX Item "%t"
date (local timezone, formatted like \f(CW%d\fR/%b/%Y \f(CW%H:\fR%M:%S)
.ie n .IP "%T" 4
.el .IP "\f(CW%T\fR" 4
.IX Item "%T"
date (local timezone, formatted like \f(CW%Y\fR\-%m\-%d \f(CW%H:\fR%M:%S)
.ie n .IP "%u" 4
.el .IP "\f(CW%u\fR" 4
.IX Item "%u"
date (\s-1UTC\s0 timezone, formatted like \f(CW%d\fR/%b/%Y \f(CW%H:\fR%M:%S)
.ie n .IP "%U" 4
.el .IP "\f(CW%U\fR" 4
.IX Item "%U"
date (\s-1UTC\s0 timezone, formatted like \f(CW%Y\fR\-%m\-%d \f(CW%H:\fR%M:%S)
.ie n .IP "%P" 4
.el .IP "\f(CW%P\fR" 4
.IX Item "%P"
\&\s-1PID\s0
.ie n .IP "%L" 4
.el .IP "\f(CW%L\fR" 4
.IX Item "%L"
log level
.ie n .IP "%D" 4
.el .IP "\f(CW%D\fR" 4
.IX Item "%D"
timer
.ie n .IP "%m" 4
.el .IP "\f(CW%m\fR" 4
.IX Item "%m"
message
.ie n .IP "%f" 4
.el .IP "\f(CW%f\fR" 4
.IX Item "%f"
file name that emit the message
.ie n .IP "%l" 4
.el .IP "\f(CW%l\fR" 4
.IX Item "%l"
line from the file
.ie n .IP "%i" 4
.el .IP "\f(CW%i\fR" 4
.IX Item "%i"
request \s-1ID\s0
.IP "%{$fmt}t" 4
.IX Item "%{$fmt}t"
timer formatted with a valid time format
.IP "%{header}h" 4
.IX Item "%{header}h"
header value
.SS "log_level"
.IX Subsection "log_level"
Level to use by default.
.SH "METHODS"
.IX Header "METHODS"
.SS "core"
.IX Subsection "core"
Log messages as \fBcore\fR.
.SS "debug"
.IX Subsection "debug"
Log messages as \fBdebug\fR.
.SS "info"
.IX Subsection "info"
Log messages as \fBinfo\fR.
.SS "warning"
.IX Subsection "warning"
Log messages as \fBwarning\fR.
.SS "error"
.IX Subsection "error"
Log messages as \fBerror\fR.
.SS "format_message"
.IX Subsection "format_message"
Provides a common message formatting.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
The \fBlogger\fR configuration variable tells Dancer2 which engine to use.
.PP
You can change it either in your config.yml file:
.PP
.Vb 2
\&    # logging to console
\&    logger: "console"
.Ve
.PP
The log format can also be configured,
please see \*(L"log_format\*(R" in Dancer2::Core::Role::Logger for details.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dancer Core Developers
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2022 by Alexis Sukrieh.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
