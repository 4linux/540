.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Template::Plugin::Dumper 3"
.TH Template::Plugin::Dumper 3 "2022-07-25" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Template::Plugin::Dumper \- Plugin interface to Data::Dumper
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    [% USE Dumper %]
\&    
\&    [% Dumper.dump(variable) %]
\&    [% Dumper.dump_html(variable) %]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a very simple Template Toolkit Plugin Interface to the Data::Dumper
module.  A \f(CW\*(C`Dumper\*(C'\fR object will be instantiated via the following directive:
.PP
.Vb 1
\&    [% USE Dumper %]
.Ve
.PP
As a standard plugin, you can also specify its name in lower case:
.PP
.Vb 1
\&    [% USE dumper %]
.Ve
.PP
The \f(CW\*(C`Data::Dumper\*(C'\fR \f(CW\*(C`Pad\*(C'\fR, \f(CW\*(C`Indent\*(C'\fR and \f(CW\*(C`Varname\*(C'\fR options are supported
as constructor arguments to affect the output generated.  See Data::Dumper
for further details.
.PP
.Vb 1
\&    [% USE dumper(Indent=0, Pad="<br>") %]
.Ve
.PP
These options can also be specified in lower case.
.PP
.Vb 1
\&    [% USE dumper(indent=0, pad="<br>") %]
.Ve
.SH "METHODS"
.IX Header "METHODS"
There are two methods supported by the \f(CW\*(C`Dumper\*(C'\fR object.  Each will
output into the template the contents of the variables passed to the
object method.
.SS "\fBdump()\fP"
.IX Subsection "dump()"
Generates a raw text dump of the data structure(s) passed
.PP
.Vb 3
\&    [% USE Dumper %]
\&    [% Dumper.dump(myvar) %]
\&    [% Dumper.dump(myvar, yourvar) %]
.Ve
.SS "\fBdump_html()\fP"
.IX Subsection "dump_html()"
Generates a dump of the data structures, as per \fBdump()\fR, but with the 
characters <, > and & converted to their equivalent \s-1HTML\s0
entities and newlines converted to <br>.
.PP
.Vb 2
\&    [% USE Dumper %]
\&    [% Dumper.dump_html(myvar) %]
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Simon Matthews <sam@tt2.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2000 Simon Matthews.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template::Plugin, Data::Dumper
