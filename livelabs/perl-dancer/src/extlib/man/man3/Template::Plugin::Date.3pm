.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Template::Plugin::Date 3"
.TH Template::Plugin::Date 3 "2022-07-26" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Template::Plugin::Date \- Plugin to generate formatted date strings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    [% USE date %]
\&
\&    # use current time and default format
\&    [% date.format %]
\&
\&    # specify time as seconds since epoch
\&    # or as a \*(Aqh:m:s d\-m\-y\*(Aq or \*(Aqy\-m\-d h:m:s\*(Aq string
\&    [% date.format(960973980) %]
\&    [% date.format(\*(Aq4:20:36 21/12/2000\*(Aq) %]
\&    [% date.format(\*(Aq2000/12/21 4:20:36\*(Aq) %]
\&
\&    # specify format
\&    [% date.format(mytime, \*(Aq%H:%M:%S\*(Aq) %]
\&
\&    # specify locale
\&    [% date.format(date.now, \*(Aq%a %d %b %y\*(Aq, \*(Aqen_GB\*(Aq) %]
\&
\&    # named parameters
\&    [% date.format(mytime, format = \*(Aq%H:%M:%S\*(Aq) %]
\&    [% date.format(locale = \*(Aqen_GB\*(Aq) %]
\&    [% date.format(time       = date.now,
\&                   format     = \*(Aq%H:%M:%S\*(Aq,
\&                   locale     = \*(Aqen_GB\*(Aq
\&                   use_offset = 1) %]
\&
\&    # specify default format to plugin
\&    [% USE date(format = \*(Aq%H:%M:%S\*(Aq, locale = \*(Aqde_DE\*(Aq) %]
\&
\&    [% date.format %]
\&    ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Date\*(C'\fR plugin provides an easy way to generate formatted time and date
strings by delegating to the \f(CW\*(C`POSIX\*(C'\fR \f(CW\*(C`strftime()\*(C'\fR routine.
.PP
The plugin can be loaded via the familiar \s-1USE\s0 directive.
.PP
.Vb 1
\&    [% USE date %]
.Ve
.PP
This creates a plugin object with the default name of '\f(CW\*(C`date\*(C'\fR'.  An alternate
name can be specified as such:
.PP
.Vb 1
\&    [% USE myname = date %]
.Ve
.PP
The plugin provides the \f(CW\*(C`format()\*(C'\fR method which accepts a time value, a
format string and a locale name.  All of these parameters are optional
with the current system time, default format ('\f(CW\*(C`%H:%M:%S %d\-%b\-%Y\*(C'\fR') and
current locale being used respectively, if undefined.  Default values
for the time, format and/or locale may be specified as named parameters
in the \f(CW\*(C`USE\*(C'\fR directive.
.PP
.Vb 1
\&    [% USE date(format = \*(Aq%a %d\-%b\-%Y\*(Aq, locale = \*(Aqfr_FR\*(Aq) %]
.Ve
.PP
When called without any parameters, the \f(CW\*(C`format()\*(C'\fR method returns a string
representing the current system time, formatted by \f(CW\*(C`strftime()\*(C'\fR according
to the default format and for the default locale (which may not be the
current one, if locale is set in the \f(CW\*(C`USE\*(C'\fR directive).
.PP
.Vb 1
\&    [% date.format %]
.Ve
.PP
The plugin allows a time/date to be specified as seconds since the epoch,
as is returned by \f(CW\*(C`time()\*(C'\fR.
.PP
.Vb 1
\&    File last modified: [% date.format(filemod_time) %]
.Ve
.PP
The time/date can also be specified as a string of the form \f(CW\*(C`h:m:s d/m/y\*(C'\fR
or \f(CW\*(C`y/m/d h:m:s\*(C'\fR.  Any of the characters : / \- or space may be used to
delimit fields.
.PP
.Vb 2
\&    [% USE day = date(format => \*(Aq%A\*(Aq, locale => \*(Aqen_GB\*(Aq) %]
\&    [% day.format(\*(Aq4:20:00 9\-13\-2000\*(Aq) %]
.Ve
.PP
Output:
.PP
.Vb 1
\&    Tuesday
.Ve
.PP
A format string can also be passed to the \f(CW\*(C`format()\*(C'\fR method, and a locale
specification may follow that.
.PP
.Vb 2
\&    [% date.format(filemod, \*(Aq%d\-%b\-%Y\*(Aq) %]
\&    [% date.format(filemod, \*(Aq%d\-%b\-%Y\*(Aq, \*(Aqen_GB\*(Aq) %]
.Ve
.PP
A fourth parameter allows you to force output in \s-1GMT,\s0 in the case of
seconds-since-the-epoch input:
.PP
.Vb 1
\&    [% date.format(filemod, \*(Aq%d\-%b\-%Y\*(Aq, \*(Aqen_GB\*(Aq, 1) %]
.Ve
.PP
Note that in this case, if the local time is not \s-1GMT,\s0 then also specifying
\&'\f(CW%Z\fR' (time zone) in the format parameter will lead to an extremely
misleading result.
.PP
To maintain backwards compatibility, using the \f(CW%z\fR placeholder in the format
string (to output the \s-1UTC\s0 offset) currently requires the \f(CW\*(C`use_offset\*(C'\fR
parameter to be set to a true value. This can also be passed as the fifth
parameter to format (but the former will probably be clearer).
.PP
Any or all of these parameters may be named.  Positional parameters
should always be in the order \f(CW\*(C`($time, $format, $locale)\*(C'\fR.
.PP
.Vb 6
\&    [% date.format(format => \*(Aq%H:%M:%S\*(Aq) %]
\&    [% date.format(time => filemod, format => \*(Aq%H:%M:%S\*(Aq) %]
\&    [% date.format(mytime, format => \*(Aq%H:%M:%S\*(Aq) %]
\&    [% date.format(mytime, format => \*(Aq%H:%M:%S\*(Aq, locale => \*(Aqfr_FR\*(Aq) %]
\&    [% date.format(mytime, format => \*(Aq%H:%M:%S\*(Aq, gmt => 1) %]
\&    ...etc...
.Ve
.PP
The \f(CW\*(C`now()\*(C'\fR method returns the current system time in seconds since the
epoch.
.PP
.Vb 1
\&    [% date.format(date.now, \*(Aq%A\*(Aq) %]
.Ve
.PP
The \f(CW\*(C`calc()\*(C'\fR method can be used to create an interface to the \f(CW\*(C`Date::Calc\*(C'\fR
module (if installed on your system).
.PP
.Vb 2
\&    [% calc = date.calc %]
\&    [% calc.Monday_of_Week(22, 2001).join(\*(Aq/\*(Aq) %]
.Ve
.PP
The \f(CW\*(C`manip()\*(C'\fR method can be used to create an interface to the \f(CW\*(C`Date::Manip\*(C'\fR
module (if installed on your system).
.PP
.Vb 2
\&    [% manip = date.manip %]
\&    [% manip.UnixDate("Noon Yesterday","%Y %b %d %H:%M") %]
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Thierry-Michel Barral wrote the original plugin.
.PP
Andy Wardley provided some minor
fixups/enhancements, a test script and documentation.
.PP
Mark D. Mills cloned \f(CW\*(C`Date::Manip\*(C'\fR from the \f(CW\*(C`Date::Calc\*(C'\fR sub-plugin.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2000\-2022 Thierry-Michel Barral, Andy Wardley.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template::Plugin, \s-1POSIX\s0
