.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dancer2::Plugins 3"
.TH Dancer2::Plugins 3 "2022-03-14" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer2::Plugins \- Recommended Dancer2 plugins
.SH "VERSION"
.IX Header "VERSION"
version 0.400000
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Dancer2 aims to keep the core as small as possible, but there are a growing
number of useful plugins to add helpful features.
.PP
This document provides a quick summary of some recommended plugins.
.SS "Plugins"
.IX Subsection "Plugins"
.IP "Dancer2::Plugin::Adapter" 4
.IX Item "Dancer2::Plugin::Adapter"
Wrap any simple class as a service for Dancer2.
.IP "Dancer2::Plugin::Ajax" 4
.IX Item "Dancer2::Plugin::Ajax"
Provides easy way to add Ajax route handlers.
.IP "Dancer2::Plugin::Auth::Tiny" 4
.IX Item "Dancer2::Plugin::Auth::Tiny"
Provides an extremely simple way of requiring that a user be logged in
before allowing access to certain routes.
.IP "Dancer2::Plugin::BrowserDetect" 4
.IX Item "Dancer2::Plugin::BrowserDetect"
Provides an easy to have info of the browser. keyword within your
Dancer application.
.IP "Dancer2::Plugin::Cache::CHI" 4
.IX Item "Dancer2::Plugin::Cache::CHI"
Provides caching for generated pages and/or arbitrary data.  Uses \s-1CHI\s0, so
is backend-agnostic \- caching can be done in memory, to files, using
Memcache, in a database, or any other method for which there is a
CHI::Driver module.
.IP "Dancer2::Plugin::Database" 4
.IX Item "Dancer2::Plugin::Database"
Provides easy database access via \s-1DBI,\s0 reading the \s-1DB\s0 connection details
from your app's config file, and taking care of ensuring the connection is
still valid and reconnecting if not (useful in persistent environments).
Just calling the \f(CW\*(C`database\*(C'\fR keyword gives you a connected and working
database handle. It also provides some helpful keywords to make
inserting/updating data as simple as it should be.
.IP "Dancer2::Plugin::DBIC" 4
.IX Item "Dancer2::Plugin::DBIC"
Provides easy access to DBIx::Class database virtualization.
.IP "Dancer2::Plugin::Deferred" 4
.IX Item "Dancer2::Plugin::Deferred"
Provides a method for deferring a one-time message across a redirect. It is
similar to \*(L"flash\*(R" messages, but without the race conditions that can result
from multiple tabs in a browser or from \s-1AJAX\s0 requests.
.IP "Dancer2::Plugin::Emailesque" 4
.IX Item "Dancer2::Plugin::Emailesque"
Provides easy email-sending powered by Email::Send \- simply call the
\&\f(CW\*(C`email\*(C'\fR keyword.  Email sending settings can be taken from your app's
config.
.IP "Dancer2::Plugin::Feed" 4
.IX Item "Dancer2::Plugin::Feed"
Provides an easy way to generate \s-1RSS\s0 or Atom feed.
.IP "Dancer2::Plugin::Paginator" 4
.IX Item "Dancer2::Plugin::Paginator"
Dancer2 plugin for Paginator::Lite.
.IP "Dancer2::Plugin::Queue" 4
.IX Item "Dancer2::Plugin::Queue"
Provides a generic interface to a message queue.
.IP "Dancer2::Plugin::Queue::MongoDB" 4
.IX Item "Dancer2::Plugin::Queue::MongoDB"
A Dancer2::Plugin::Queue using MongoDBx::Queue.
.IP "Dancer2::Plugin::REST" 4
.IX Item "Dancer2::Plugin::REST"
Makes writing RESTful web services easy.
.IP "Dancer2::Plugin::RoutePodCoverage" 4
.IX Item "Dancer2::Plugin::RoutePodCoverage"
Plugin to verify pod coverage in our app routes.
.IP "Dancer2::Plugin::Syntax::GetPost" 4
.IX Item "Dancer2::Plugin::Syntax::GetPost"
Provides very simple syntactic sugar to define a handler for \s-1GET\s0 and \s-1POST\s0
requests.
.SS "Session Engines"
.IX Subsection "Session Engines"
.IP "Dancer2::Session::Cookie" 4
.IX Item "Dancer2::Session::Cookie"
A session factory for Dancer2 that stores session state within a browser
cookie.
.PP
More plugins are appearing on \s-1CPAN\s0 all the time \- just search for
\&\f(CW\*(C`Dancer2::Plugin\*(C'\fR to see what may have been released since this document
was last updated!
.SH "AUTHOR"
.IX Header "AUTHOR"
Dancer Core Developers
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2022 by Alexis Sukrieh.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
