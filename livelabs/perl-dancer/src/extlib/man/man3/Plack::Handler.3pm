.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Plack::Handler 3"
.TH Plack::Handler 3 "2022-09-05" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Plack::Handler \- Connects PSGI applications and Web servers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  package Plack::Handler::AwesomeWebServer;
\&  sub new {
\&      my($class, %opt) = @_;
\&      ...
\&      return $self;
\&  }
\&
\&  sub run {
\&      my($self, $app) = @_;
\&      # launch the AwesomeWebServer and run $app in the loop
\&  }
\&
\&  # then from command line
\&  plackup \-s AwesomeWebServer \-a app.psgi
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Plack::Handler defines an adapter (connector) interface to adapt
plackup and Plack::Runner to various \s-1PSGI\s0 web servers, such as
Apache2 for mod_perl and Standalone for HTTP::Server::PSGI.
.PP
It is an empty class, and as long as they implement the methods
defined as an Server adapter interface, they do not need to inherit
Plack::Handler.
.PP
If you write a new handler for existing web servers, I recommend you
to include the full name of the server module after \fIPlack::Handler\fR
prefix, like Plack::Handler::Net::Server::Coro if you write a
handler for Net::Server::Coro. That way you'll be using plackup
command line option like:
.PP
.Vb 1
\&  plackup \-s Net::Server::Coro
.Ve
.PP
that makes it easy to figure out which web server you're going to use.
.SH "METHODS"
.IX Header "METHODS"
.IP "new" 4
.IX Item "new"
.Vb 1
\&  $server = FooBarServer\->new(%args);
.Ve
.Sp
Creates a new adapter object. \fI\f(CI%args\fI\fR can take arbitrary parameters
to configure server environments but common parameters are:
.RS 4
.IP "port" 8
.IX Item "port"
Port number the server listens to.
.IP "host" 8
.IX Item "host"
Address the server listens to. Set to undef to listen any interface.
.RE
.RS 4
.RE
.IP "run" 4
.IX Item "run"
.Vb 1
\&  $server\->run($app);
.Ve
.Sp
Starts the server process and when a request comes in, run the \s-1PSGI\s0
application passed in \f(CW$app\fR in the loop.
.IP "register_service" 4
.IX Item "register_service"
.Vb 1
\&  $server\->register_service($app);
.Ve
.Sp
Optional interface if your server should run in parallel with other
event loop, particularly AnyEvent. This is the same as \f(CW\*(C`run\*(C'\fR but
doesn't run the main loop.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
rackup
