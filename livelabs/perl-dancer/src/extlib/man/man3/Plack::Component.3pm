.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Plack::Component 3"
.TH Plack::Component 3 "2022-09-05" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Plack::Component \- Base class for PSGI endpoints
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package Plack::App::Foo;
\&  use parent qw( Plack::Component );
\&
\&  sub call {
\&      my($self, $env) = @_;
\&      # Do something with $env
\&
\&      my $res = ...; # create a response ...
\&
\&      # return the response
\&      return $res;
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Plack::Component is the base class shared between Plack::Middleware
and \f(CW\*(C`Plack::App::*\*(C'\fR modules. If you are writing middleware, you should
inherit from Plack::Middleware, but if you are writing a
Plack::App::* you should inherit from this directly.
.SH "REQUIRED METHOD"
.IX Header "REQUIRED METHOD"
.IP "call ($env)" 4
.IX Item "call ($env)"
You are expected to implement a \f(CW\*(C`call\*(C'\fR method in your component. This
is where all the work gets done. It receives the \s-1PSGI\s0 \f(CW$env\fR hash-ref
as an argument and is expected to return a proper \s-1PSGI\s0 response value.
.SH "METHODS"
.IX Header "METHODS"
.IP "new (%opts | \e%opts)" 4
.IX Item "new (%opts | %opts)"
The constructor accepts either a hash or a hashref and uses that to
create the instance. It will call no other methods and simply return
the instance that is created.
.IP "prepare_app" 4
.IX Item "prepare_app"
This method is called by \f(CW\*(C`to_app\*(C'\fR and is meant as a hook to be used to
prepare your component before it is packaged as a \s-1PSGI\s0 \f(CW$app\fR.
.IP "to_app" 4
.IX Item "to_app"
This is the method used in several parts of the Plack infrastructure to
convert your component into a \s-1PSGI\s0 \f(CW$app\fR. You should not ever need to
override this method; it is recommended to use \f(CW\*(C`prepare_app\*(C'\fR and \f(CW\*(C`call\*(C'\fR
instead.
.IP "response_cb" 4
.IX Item "response_cb"
This is a wrapper for \f(CW\*(C`response_cb\*(C'\fR in Plack::Util. See
\&\*(L"\s-1RESPONSE CALLBACK\*(R"\s0 in Plack::Middleware for details.
.SH "OBJECT LIFECYCLE"
.IX Header "OBJECT LIFECYCLE"
Objects for the derived classes (Plack::App::* or
Plack::Middleware::*) are created at the \s-1PSGI\s0 application compile
phase using \f(CW\*(C`new\*(C'\fR, \f(CW\*(C`prepare_app\*(C'\fR and \f(CW\*(C`to_app\*(C'\fR, and the created
object persists during the web server lifecycle, unless it is running
on the non-persistent environment like \s-1CGI.\s0 \f(CW\*(C`call\*(C'\fR is invoked against
the same object whenever a new request comes in.
.PP
You can check if it is running in a persistent environment by checking
\&\f(CW\*(C`psgi.run_once\*(C'\fR key in the \f(CW$env\fR being true (non-persistent) or
false (persistent), but it is best for you to write your middleware
safely for a persistent environment. To accomplish that, you should
avoid saving per-request data like \f(CW$env\fR in your object.
.SH "BACKWARDS COMPATIBILITY"
.IX Header "BACKWARDS COMPATIBILITY"
The Plack::Middleware module used to inherit from Class::Accessor::Fast,
which has been removed in favor of the Plack::Util::Accessor module. When
developing new components it is recommended to use Plack::Util::Accessor
like so:
.PP
.Vb 1
\&  use Plack::Util::Accessor qw( foo bar baz );
.Ve
.PP
However, in order to keep backwards compatibility this module provides a
\&\f(CW\*(C`mk_accessors\*(C'\fR method similar to Class::Accessor::Fast. New code should
not use this and use Plack::Util::Accessor instead.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Plack Plack::Builder Plack::Middleware
