.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Template::Stash 3"
.TH Template::Stash 3 "2022-07-26" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Template::Stash \- Magical storage for template variables
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Template::Stash;
\&
\&    my $stash = Template::Stash\->new(\e%vars);
\&
\&    # get variable values
\&    $value = $stash\->get($variable);
\&    $value = $stash\->get(\e@compound);
\&
\&    # set variable value
\&    $stash\->set($variable, $value);
\&    $stash\->set(\e@compound, $value);
\&
\&    # default variable value
\&    $stash\->set($variable, $value, 1);
\&    $stash\->set(\e@compound, $value, 1);
\&
\&    # set variable values en masse
\&    $stash\->update(\e%new_vars)
\&
\&    # methods for (de\-)localising variables
\&    $stash = $stash\->clone(\e%new_vars);
\&    $stash = $stash\->declone();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Template::Stash\*(C'\fR module defines an object class which is used to store
variable values for the runtime use of the template processor.  Variable
values are stored internally in a hash reference (which itself is blessed
to create the object) and are accessible via the \fBget()\fR and \fBset()\fR methods.
.PP
Variables may reference hash arrays, lists, subroutines and objects
as well as simple values.  The stash automatically performs the right
magic when dealing with variables, calling code or object methods,
indexing into lists, hashes, etc.
.PP
The stash has \fBclone()\fR and \fBdeclone()\fR methods which are used by the
template processor to make temporary copies of the stash for
localising changes made to variables.
.SH "PUBLIC METHODS"
.IX Header "PUBLIC METHODS"
.SS "new(\e%params)"
.IX Subsection "new(%params)"
The \f(CW\*(C`new()\*(C'\fR constructor method creates and returns a reference to a new
\&\f(CW\*(C`Template::Stash\*(C'\fR object.
.PP
.Vb 1
\&    my $stash = Template::Stash\->new();
.Ve
.PP
A hash reference may be passed to provide variables and values which
should be used to initialise the stash.
.PP
.Vb 2
\&    my $stash = Template::Stash\->new({ var1 => \*(Aqvalue1\*(Aq,
\&                                       var2 => \*(Aqvalue2\*(Aq });
.Ve
.SS "get($variable)"
.IX Subsection "get($variable)"
The \f(CW\*(C`get()\*(C'\fR method retrieves the variable named by the first parameter.
.PP
.Vb 1
\&    $value = $stash\->get(\*(Aqvar1\*(Aq);
.Ve
.PP
Dotted compound variables can be retrieved by specifying the variable
elements by reference to a list.  Each node in the variable occupies
two entries in the list.  The first gives the name of the variable
element, the second is a reference to a list of arguments for that
element, or \f(CW0\fR if none.
.PP
.Vb 1
\&    [% foo.bar(10).baz(20) %]
\&
\&    $stash\->get([ \*(Aqfoo\*(Aq, 0, \*(Aqbar\*(Aq, [ 10 ], \*(Aqbaz\*(Aq, [ 20 ] ]);
.Ve
.ie n .SS "set($variable, $value, $default)"
.el .SS "set($variable, \f(CW$value\fP, \f(CW$default\fP)"
.IX Subsection "set($variable, $value, $default)"
The \f(CW\*(C`set()\*(C'\fR method sets the variable name in the first parameter to the
value specified in the second.
.PP
.Vb 1
\&    $stash\->set(\*(Aqvar1\*(Aq, \*(Aqvalue1\*(Aq);
.Ve
.PP
If the third parameter evaluates to a true value, the variable is
set only if it did not have a true value before.
.PP
.Vb 1
\&    $stash\->set(\*(Aqvar2\*(Aq, \*(Aqdefault_value\*(Aq, 1);
.Ve
.PP
Dotted compound variables may be specified as per \fBget()\fR above.
.PP
.Vb 1
\&    [% foo.bar = 30 %]
\&
\&    $stash\->set([ \*(Aqfoo\*(Aq, 0, \*(Aqbar\*(Aq, 0 ], 30);
.Ve
.PP
The magical variable '\f(CW\*(C`IMPORT\*(C'\fR' can be specified whose corresponding
value should be a hash reference.  The contents of the hash array are
copied (i.e. imported) into the current namespace.
.PP
.Vb 2
\&    # foo.bar = baz, foo.wiz = waz
\&    $stash\->set(\*(Aqfoo\*(Aq, { \*(Aqbar\*(Aq => \*(Aqbaz\*(Aq, \*(Aqwiz\*(Aq => \*(Aqwaz\*(Aq });
\&
\&    # import \*(Aqfoo\*(Aq into main namespace: bar = baz, wiz = waz
\&    $stash\->set(\*(AqIMPORT\*(Aq, $stash\->get(\*(Aqfoo\*(Aq));
.Ve
.SS "update($variables)"
.IX Subsection "update($variables)"
This method can be used to set or update several variables in one go.
.PP
.Vb 4
\&    $stash\->update({
\&        foo => 10,
\&        bar => 20,
\&    });
.Ve
.SS "getref($variable)"
.IX Subsection "getref($variable)"
This undocumented feature returns a closure which can be called to get the
value of a variable.  It is used to implement variable references which are
evaluated lazily.
.PP
.Vb 2
\&    [% x = \efoo.bar.baz %]          # x is a reference to foo.bar.baz
\&    [% x %]                         # evalautes foo.bar.baz
.Ve
.SS "clone(\e%params)"
.IX Subsection "clone(%params)"
The \f(CW\*(C`clone()\*(C'\fR method creates and returns a new \f(CW\*(C`Template::Stash\*(C'\fR object
which represents a localised copy of the parent stash. Variables can be freely
updated in the cloned stash and when \fBdeclone()\fR is called, the original stash
is returned with all its members intact and in the same state as they were
before \f(CW\*(C`clone()\*(C'\fR was called.
.PP
For convenience, a hash of parameters may be passed into \f(CW\*(C`clone()\*(C'\fR which
is used to update any simple variable (i.e. those that don't contain any
namespace elements like \f(CW\*(C`foo\*(C'\fR and \f(CW\*(C`bar\*(C'\fR but not \f(CW\*(C`foo.bar\*(C'\fR) variables while
cloning the stash.  For adding and updating complex variables, the \fBset()\fR
method should be used after calling \f(CW\*(C`clone().\*(C'\fR  This will correctly resolve
and/or create any necessary namespace hashes.
.PP
A cloned stash maintains a reference to the stash that it was copied
from in its \f(CW\*(C`_PARENT\*(C'\fR member.
.SS "\fBdeclone()\fP"
.IX Subsection "declone()"
The \f(CW\*(C`declone()\*(C'\fR method returns the \f(CW\*(C`_PARENT\*(C'\fR reference and can be used to
restore the state of a stash as described above.
.ie n .SS "define_vmethod($type, $name, $code)"
.el .SS "define_vmethod($type, \f(CW$name\fP, \f(CW$code\fP)"
.IX Subsection "define_vmethod($type, $name, $code)"
This method can be used to define new virtual methods.  The first argument
should be either \f(CW\*(C`scalar\*(C'\fR or \f(CW\*(C`item\*(C'\fR to define scalar virtual method, \f(CW\*(C`hash\*(C'\fR
to define hash virtual methods, or either \f(CW\*(C`array\*(C'\fR or \f(CW\*(C`list\*(C'\fR for list virtual
methods.  The second argument should be the name of the new method.  The third
argument should be a reference to a subroutine implementing the method.  The
data item on which the virtual method is called is passed to the subroutine as
the first argument.
.PP
.Vb 6
\&    $stash\->define_vmethod(
\&        item => ucfirst => sub {
\&            my $text = shift;
\&            return ucfirst $text
\&        }
\&    );
.Ve
.SH "INTERNAL METHODS"
.IX Header "INTERNAL METHODS"
.ie n .SS "dotop($root, $item, \e@args, $lvalue)"
.el .SS "dotop($root, \f(CW$item\fP, \e@args, \f(CW$lvalue\fP)"
.IX Subsection "dotop($root, $item, @args, $lvalue)"
This is the core \f(CW\*(C`dot\*(C'\fR operation method which evaluates elements of
variables against their root.
.ie n .SS "undefined($ident, $args)"
.el .SS "undefined($ident, \f(CW$args\fP)"
.IX Subsection "undefined($ident, $args)"
This method is called when \fBget()\fR encounters an undefined value.  If the
\&\s-1STRICT\s0 option is in effect then it will
throw an exception indicating the use of an undefined value.  Otherwise it
will silently return an empty string.
.PP
The method can be redefined in a subclass to implement alternate handling
of undefined values.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Wardley <abw@wardley.org> <http://wardley.org/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1996\-2022 Andy Wardley.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template, Template::Context
