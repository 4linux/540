.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Template::Plugin::Datafile 3"
.TH Template::Plugin::Datafile 3 "2022-07-26" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Template::Plugin::Datafile \- Plugin to construct records from a simple data file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    [% USE mydata = datafile(\*(Aq/path/to/datafile\*(Aq) %]
\&    [% USE mydata = datafile(\*(Aq/path/to/datafile\*(Aq, delim = \*(Aq|\*(Aq) %]
\&    [% USE mydata = datafile(\*(Aq/path/to/datafile\*(Aq, encoding = \*(AqUTF\-8\*(Aq) %]
\&
\&    [% FOREACH record = mydata %]
\&       [% record.this %]  [% record.that %]
\&    [% END %]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This plugin provides a simple facility to construct a list of hash
references, each of which represents a data record of known structure,
from a data file.
.PP
.Vb 1
\&    [% USE datafile(filename) %]
.Ve
.PP
A absolute filename must be specified (for this initial implementation at
least \- in a future version it might also use the \f(CW\*(C`INCLUDE_PATH\*(C'\fR).  An
optional \f(CW\*(C`delim\*(C'\fR parameter may also be provided to specify an alternate
delimiter character.
The optional \f(CW\*(C`encoding\*(C'\fR parameter may be used to specify the input file
encoding.
.PP
.Vb 2
\&    [% USE userlist = datafile(\*(Aq/path/to/file/users\*(Aq)     %]
\&    [% USE things   = datafile(\*(Aqitems\*(Aq, delim = \*(Aq|\*(Aq) %]
.Ve
.PP
The format of the file is intentionally simple.  The first line
defines the field names, delimited by colons with optional surrounding
whitespace.  Subsequent lines then defines records containing data
items, also delimited by colons.  e.g.
.PP
.Vb 3
\&    id : name : email : tel
\&    abw : Andy Wardley : abw@tt2.org : 555\-1234
\&    sam : Simon Matthews : sam@tt2.org : 555\-9876
.Ve
.PP
Each line is read, split into composite fields, and then used to
initialise a hash array containing the field names as relevant keys.
The plugin returns a blessed list reference containing the hash
references in the order as defined in the file.
.PP
.Vb 3
\&    [% FOREACH user = userlist %]
\&       [% user.id %]: [% user.name %]
\&    [% END %]
.Ve
.PP
The first line of the file \fBmust\fR contain the field definitions.
After the first line, blank lines will be ignored, along with comment
line which start with a '\f(CW\*(C`#\*(C'\fR'.
.SH "BUGS"
.IX Header "BUGS"
Should handle file names relative to \f(CW\*(C`INCLUDE_PATH\*(C'\fR.
Doesn't permit use of '\f(CW\*(C`:\*(C'\fR' in a field.  Some escaping mechanism is required.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Wardley <abw@wardley.org> <http://wardley.org/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1996\-2022 Andy Wardley.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template::Plugin
