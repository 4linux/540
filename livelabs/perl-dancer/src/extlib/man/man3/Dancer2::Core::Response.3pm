.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dancer2::Core::Response 3"
.TH Dancer2::Core::Response 3 "2022-03-14" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer2::Core::Response \- Response object for Dancer2
.SH "VERSION"
.IX Header "VERSION"
version 0.400000
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "is_encoded"
.IX Subsection "is_encoded"
Flag to tell if the content has already been encoded.
.SS "is_halted"
.IX Subsection "is_halted"
Flag to tell whether or not the response should continue to be processed.
.SS "status"
.IX Subsection "status"
The \s-1HTTP\s0 status for the response.
.SS "content"
.IX Subsection "content"
The content for the response, stored as a string.  If a reference is passed, the
response will try coerce it to a string via double quote interpolation.
.SS "default_content_type"
.IX Subsection "default_content_type"
Default mime type to use for the response Content-Type header
if nothing was specified
.SS "headers"
.IX Subsection "headers"
The attribute that store the headers in a HTTP::Headers::Fast object.
.PP
That attribute coerces from ArrayRef and defaults to an empty HTTP::Headers::Fast
instance.
.SH "METHODS"
.IX Header "METHODS"
.SS "pass"
.IX Subsection "pass"
Set has_passed to true.
.SS "\fBserializer()\fP"
.IX Subsection "serializer()"
Returns the optional serializer object used to deserialize request parameters
.SS "halt"
.IX Subsection "halt"
Shortcut to halt the current response by setting the is_halted flag.
.SS "encode_content"
.IX Subsection "encode_content"
Encodes the stored content according to the stored content_type.  If the content_type
is a text format \f(CW\*(C`^text\*(C'\fR, then no encoding will take place.
.PP
Internally, it uses the is_encoded flag to make sure that content is not encoded twice.
.PP
If it encodes the content, then it will return the encoded content.  In all other
cases it returns \f(CW\*(C`false\*(C'\fR.
.SS "new_from_plack"
.IX Subsection "new_from_plack"
Creates a new response object from a Plack::Response object.
.SS "new_from_array"
.IX Subsection "new_from_array"
Creates a new response object from a \s-1PSGI\s0 arrayref.
.SS "to_psgi"
.IX Subsection "to_psgi"
Converts the response object to a \s-1PSGI\s0 array.
.SS "content_type($type)"
.IX Subsection "content_type($type)"
A little sugar for setting or accessing the content_type of the response, via the headers.
.ie n .SS "redirect ($destination, $status)"
.el .SS "redirect ($destination, \f(CW$status\fP)"
.IX Subsection "redirect ($destination, $status)"
Sets a header in this response to give a redirect to \f(CW$destination\fR, and sets the
status to \f(CW$status\fR.  If \f(CW$status\fR is omitted, or false, then it defaults to a status of
302.
.ie n .SS "error( @args )"
.el .SS "error( \f(CW@args\fP )"
.IX Subsection "error( @args )"
.Vb 1
\&    $response\->error( message => "oops" );
.Ve
.PP
Creates a Dancer2::Core::Error object with the given \fI\f(CI@args\fI\fR and \fI\f(BIthrow()\fI\fR
it against the response object. Returns the error object.
.ie n .SS "serialize( $content )"
.el .SS "serialize( \f(CW$content\fP )"
.IX Subsection "serialize( $content )"
.Vb 1
\&    $response\->serialize( $content );
.Ve
.PP
Serialize and return \f(CW$content\fR with the response's serializer.
set content-type accordingly.
.SS "header($name)"
.IX Subsection "header($name)"
Return the value of the given header, if present. If the header has multiple
values, returns the list of values if called in list context, the first one
if in scalar context.
.SS "push_header"
.IX Subsection "push_header"
Add the header no matter if it already exists or not.
.PP
.Vb 1
\&    $self\->push_header( \*(AqX\-Wing\*(Aq => \*(Aq1\*(Aq );
.Ve
.PP
It can also be called with multiple values to add many times the same header
with different values:
.PP
.Vb 1
\&    $self\->push_header( \*(AqX\-Wing\*(Aq => 1, 2, 3 );
.Ve
.SS "headers_to_array($headers)"
.IX Subsection "headers_to_array($headers)"
Convert the \f(CW$headers\fR to a \s-1PSGI\s0 ArrayRef.
.PP
If no \f(CW$headers\fR are provided, it will use the current response headers.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dancer Core Developers
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2022 by Alexis Sukrieh.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
