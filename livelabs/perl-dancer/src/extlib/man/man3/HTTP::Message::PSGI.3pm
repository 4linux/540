.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "HTTP::Message::PSGI 3"
.TH HTTP::Message::PSGI 3 "2022-09-05" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTTP::Message::PSGI \- Converts HTTP::Request and HTTP::Response from/to PSGI env and response
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use HTTP::Message::PSGI;
\&
\&  # $req is HTTP::Request, $res is HTTP::Response
\&  my $env = req_to_psgi($req);
\&  my $res = res_from_psgi([ $status, $headers, $body ]);
\&
\&  # Adds methods to HTTP::Request/Response class as well
\&  my $env = $req\->to_psgi;
\&  my $res = HTTP::Response\->from_psgi([ $status, $headers, $body ]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
HTTP::Message::PSGI gives you convenient methods to convert an HTTP::Request
object to a \s-1PSGI\s0 env hash and convert a \s-1PSGI\s0 response arrayref to
a HTTP::Response object.
.PP
If you want the other way around, see Plack::Request and
Plack::Response.
.SH "METHODS"
.IX Header "METHODS"
.IP "req_to_psgi" 4
.IX Item "req_to_psgi"
.Vb 1
\&  my $env = req_to_psgi($req [, $key => $val ... ]);
.Ve
.Sp
Converts a HTTP::Request object into a \s-1PSGI\s0 env hash reference.
.IP "HTTP::Request::to_psgi" 4
.IX Item "HTTP::Request::to_psgi"
.Vb 1
\&  my $env = $req\->to_psgi;
.Ve
.Sp
Same as \f(CW\*(C`req_to_psgi\*(C'\fR but an instance method in HTTP::Request.
.IP "res_from_psgi" 4
.IX Item "res_from_psgi"
.Vb 1
\&  my $res = res_from_psgi([ $status, $headers, $body ]);
.Ve
.Sp
Creates a HTTP::Response object from a \s-1PSGI\s0 response array ref.
.IP "HTTP::Response\->from_psgi" 4
.IX Item "HTTP::Response->from_psgi"
.Vb 1
\&  my $res = HTTP::Response\->from_psgi([ $status, $headers, $body ]);
.Ve
.Sp
Same as \f(CW\*(C`res_from_psgi\*(C'\fR, but is a class method in HTTP::Response.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tatsuhiko Miyagawa
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTTP::Request::AsCGI HTTP::Message Plack::Test
