.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Template::Filters 3"
.TH Template::Filters 3 "2022-07-26" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Template::Filters \- Post\-processing filters for template blocks
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Template::Filters;
\&
\&    $filters = Template::Filters\->new(\e%config);
\&
\&    ($filter, $error) = $filters\->fetch($name, \e@args, $context);
\&
\&    if ($filter) {
\&        print &$filter("some text");
\&    }
\&    else {
\&        print "Could not fetch $name filter: $error\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Template::Filters\*(C'\fR module implements a provider for creating subroutines
that implement the standard filters. Additional custom filters may be provided
via the \s-1FILTERS\s0 configuration option.
.SH "METHODS"
.IX Header "METHODS"
.SS "new(\e%params)"
.IX Subsection "new(%params)"
Constructor method which instantiates and returns a reference to a
\&\f(CW\*(C`Template::Filters\*(C'\fR object.  A reference to a hash array of configuration
items may be passed as a parameter.  These are described below.
.PP
.Vb 3
\&    my $filters = Template::Filters\->new({
\&        FILTERS => { ... },
\&    });
\&
\&    my $template = Template\->new({
\&        LOAD_FILTERS => [ $filters ],
\&    });
.Ve
.PP
A default \f(CW\*(C`Template::Filters\*(C'\fR module is created by the Template module
if the \s-1LOAD_FILTERS\s0 option isn't specified.  All configuration parameters
are forwarded to the constructor.
.PP
.Vb 3
\&    $template = Template\->new({
\&        FILTERS => { ... },
\&    });
.Ve
.ie n .SS "fetch($name, \e@args, $context)"
.el .SS "fetch($name, \e@args, \f(CW$context\fP)"
.IX Subsection "fetch($name, @args, $context)"
Called to request that a filter of a given name be provided.  The name
of the filter should be specified as the first parameter.  This should
be one of the standard filters or one specified in the \s-1FILTERS\s0
configuration hash.  The second argument should be a reference to an
array containing configuration parameters for the filter.  This may be
specified as 0, or undef where no parameters are provided.  The third
argument should be a reference to the current Template::Context
object.
.PP
The method returns a reference to a filter sub-routine on success.  It
may also return \f(CW\*(C`(undef, STATUS_DECLINE)\*(C'\fR to decline the request, to allow
delegation onto other filter providers in the \s-1LOAD_FILTERS\s0 chain of
responsibility.  On error, \f(CW\*(C`($error, STATUS_ERROR)\*(C'\fR is returned where \f(CW$error\fR
is an error message or Template::Exception object indicating the error
that occurred.
.PP
When the \f(CW\*(C`TOLERANT\*(C'\fR option is set, errors are automatically downgraded to
a \f(CW\*(C`STATUS_DECLINE\*(C'\fR response.
.SS "\fBuse_html_entities()\fP"
.IX Subsection "use_html_entities()"
This class method can be called to configure the \f(CW\*(C`html_entity\*(C'\fR filter to use
the HTML::Entities module. An error will be raised if it is not installed
on your system.
.PP
.Vb 2
\&    use Template::Filters;
\&    Template::Filters\->use_html_entities();
.Ve
.SS "\fBuse_apache_util()\fP"
.IX Subsection "use_apache_util()"
This class method can be called to configure the \f(CW\*(C`html_entity\*(C'\fR filter to use
the Apache::Util module. An error will be raised if it is not installed on
your system.
.PP
.Vb 2
\&    use Template::Filters;
\&    Template::Filters\->use_apache_util();
.Ve
.SS "\fBuse_rfc2732()\fP"
.IX Subsection "use_rfc2732()"
This class method can be called to configure the \f(CW\*(C`uri\*(C'\fR and \f(CW\*(C`url\*(C'\fR filters to
use the older \s-1RFC2732\s0 standard for matching unsafe characters.
.SS "\fBuse_rfc3986()\fP"
.IX Subsection "use_rfc3986()"
This class method can be called to configure the \f(CW\*(C`uri\*(C'\fR and \f(CW\*(C`url\*(C'\fR filters to
use the newer \s-1RFC3986\s0 standard for matching unsafe characters.
.SH "CONFIGURATION OPTIONS"
.IX Header "CONFIGURATION OPTIONS"
The following list summarises the configuration options that can be provided
to the \f(CW\*(C`Template::Filters\*(C'\fR \fBnew()\fR constructor. Please see
Template::Manual::Config for further information about each option.
.SS "\s-1FILTERS\s0"
.IX Subsection "FILTERS"
The \s-1FILTERS\s0 option can be used to specify
custom filters which can then be used with the
\&\s-1FILTER\s0 directive like any other. These
are added to the standard filters which are available by default.
.PP
.Vb 6
\&    $filters = Template::Filters\->new({
\&        FILTERS => {
\&            \*(Aqsfilt1\*(Aq =>   \e&static_filter,
\&            \*(Aqdfilt1\*(Aq => [ \e&dyanamic_filter_factory, 1 ],
\&        },
\&    });
.Ve
.SS "\s-1TOLERANT\s0"
.IX Subsection "TOLERANT"
The \s-1TOLERANT\s0 flag can be set to indicate
that the \f(CW\*(C`Template::Filters\*(C'\fR module should ignore any errors and instead
return \f(CW\*(C`STATUS_DECLINED\*(C'\fR.
.SS "\s-1DEBUG\s0"
.IX Subsection "DEBUG"
The \s-1DEBUG\s0 option can be used to enable
debugging messages for the Template::Filters module by setting it to include
the \f(CW\*(C`DEBUG_FILTERS\*(C'\fR value.
.PP
.Vb 1
\&    use Template::Constants qw( :debug );
\&
\&    my $template = Template\->new({
\&        DEBUG => DEBUG_FILTERS | DEBUG_PLUGINS,
\&    });
.Ve
.SH "STANDARD FILTERS"
.IX Header "STANDARD FILTERS"
Please see Template::Manual::Filters for a list of the filters provided
with the Template Toolkit, complete with examples of use.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Wardley <abw@wardley.org> <http://wardley.org/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1996\-20202Andy Wardley.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template::Manual::Filters, Template, Template::Context
