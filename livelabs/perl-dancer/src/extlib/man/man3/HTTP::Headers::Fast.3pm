.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTTP::Headers::Fast 3pm"
.TH HTTP::Headers::Fast 3pm "2019-04-16" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTTP::Headers::Fast \- faster implementation of HTTP::Headers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use HTTP::Headers::Fast;
\&  # and, same as HTTP::Headers.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
HTTP::Headers::Fast is a perl class for parsing/writing \s-1HTTP\s0 headers.
.PP
The interface is same as HTTP::Headers.
.SH "WHY YET ANOTHER ONE?"
.IX Header "WHY YET ANOTHER ONE?"
HTTP::Headers is a very good. But I needed a faster implementation, fast  =)
.SH "ADDITIONAL METHODS"
.IX Header "ADDITIONAL METHODS"
.IP "as_string_without_sort" 4
.IX Item "as_string_without_sort"
as_string method sorts the header names.But, sorting is bit slow.
.Sp
In this method, stringify the instance of HTTP::Headers::Fast without sorting.
.IP "psgi_flatten" 4
.IX Item "psgi_flatten"
returns \s-1PSGI\s0 compatible arrayref of header.
.Sp
.Vb 1
\&    my $headers:ArrayRef = $header\->flatten
.Ve
.IP "psgi_flatten_without_sort" 4
.IX Item "psgi_flatten_without_sort"
same as flatten but returns arrayref without sorting.
.ie n .SH "@ISA HACK"
.el .SH "\f(CW@ISA\fP HACK"
.IX Header "@ISA HACK"
If you want HTTP::Headers::Fast to pretend like it's really HTTP::Headers, you can try the following hack:
.PP
.Vb 1
\&    unshift @HTTP::Headers::Fast::ISA, \*(AqHTTP::Headers\*(Aq;
.Ve
.SH "BENCHMARK"
.IX Header "BENCHMARK"
.Vb 1
\&    HTTP::Headers 5.818, HTTP::Headers::Fast 0.01
\&
\&    \-\- push_header
\&            Rate orig fast
\&    orig 144928/s   \-\- \-20%
\&    fast 181818/s  25%   \-\-
\&
\&    \-\- push_header_many
\&            Rate orig fast
\&    orig 74627/s   \-\- \-16%
\&    fast 89286/s  20%   \-\-
\&
\&    \-\- get_date
\&            Rate orig fast
\&    orig 34884/s   \-\- \-14%
\&    fast 40541/s  16%   \-\-
\&
\&    \-\- set_date
\&            Rate orig fast
\&    orig 21505/s   \-\- \-19%
\&    fast 26525/s  23%   \-\-
\&
\&    \-\- scan
\&            Rate orig fast
\&    orig 57471/s   \-\-  \-1%
\&    fast 57803/s   1%   \-\-
\&
\&    \-\- get_header
\&            Rate orig fast
\&    orig 120337/s   \-\- \-24%
\&    fast 157729/s  31%   \-\-
\&
\&    \-\- set_header
\&            Rate orig fast
\&    orig  79745/s   \-\- \-30%
\&    fast 113766/s  43%   \-\-
\&
\&    \-\- get_content_length
\&            Rate orig fast
\&    orig 182482/s   \-\- \-77%
\&    fast 793651/s 335%   \-\-
\&
\&    \-\- as_string
\&            Rate orig fast
\&    orig 23753/s   \-\- \-41%
\&    fast 40161/s  69%   \-\-
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\&    Tokuhiro Matsuno E<lt>tokuhirom@gmail.comE<gt>
\&    Daisuke Maki
.Ve
.PP
And HTTP::Headers' originally written by Gisle Aas.
.SH "THANKS TO"
.IX Header "THANKS TO"
Markstos
.PP
Tatsuhiko Miyagawa
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTTP::Headers
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
