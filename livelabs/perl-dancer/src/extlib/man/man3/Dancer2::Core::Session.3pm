.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dancer2::Core::Session 3"
.TH Dancer2::Core::Session 3 "2022-03-14" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer2::Core::Session \- class to represent any session object
.SH "VERSION"
.IX Header "VERSION"
version 0.400000
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A session object encapsulates anything related to a specific session: its \s-1ID,\s0
its data, and its expiration.
.PP
It is completely agnostic of how it will be stored, this is the role of
a factory that consumes Dancer2::Core::Role::SessionFactory to know about that.
.PP
Generally, session objects should not be created directly.  The correct way to
get a new session object is to call the \f(CW\*(C`create()\*(C'\fR method on a session engine
that implements the SessionFactory role.  This is done automatically by the
app object if a session engine is defined.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "id"
.IX Subsection "id"
The identifier of the session object. Required. By default,
Dancer2::Core::Role::SessionFactory sets this to a randomly-generated,
guaranteed-unique string.
.PP
This attribute can be modified if your Session implementation requires this.
.SS "data"
.IX Subsection "data"
Contains the data of the session (Hash).
.SS "expires"
.IX Subsection "expires"
Number of seconds for the expiry of the session cookie. Don't add the current
timestamp to it, will be done automatically.
.PP
Default is no expiry (session cookie will leave for the whole browser's
session).
.PP
For a lifetime of one hour:
.PP
.Vb 1
\&  expires => 3600
.Ve
.SS "is_dirty"
.IX Subsection "is_dirty"
Boolean value for whether data in the session has been modified.
.SH "METHODS"
.IX Header "METHODS"
.SS "read"
.IX Subsection "read"
Reader on the session data
.PP
.Vb 1
\&    my $value = $session\->read(\*(Aqsomething\*(Aq);
.Ve
.PP
Returns \f(CW\*(C`undef\*(C'\fR if the key does not exist in the session.
.SS "write"
.IX Subsection "write"
Writer on the session data
.PP
.Vb 1
\&  $session\->write(\*(Aqsomething\*(Aq, $value);
.Ve
.PP
Sets \f(CW\*(C`is_dirty\*(C'\fR to true. Returns \f(CW$value\fR.
.SS "delete"
.IX Subsection "delete"
Deletes a key from session data
.PP
.Vb 1
\&  $session\->delete(\*(Aqsomething\*(Aq);
.Ve
.PP
Sets \f(CW\*(C`is_dirty\*(C'\fR to true. Returns the value deleted from the session.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dancer Core Developers
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2022 by Alexis Sukrieh.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
