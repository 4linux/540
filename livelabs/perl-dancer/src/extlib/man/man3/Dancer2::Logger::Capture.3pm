.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dancer2::Logger::Capture 3"
.TH Dancer2::Logger::Capture 3 "2022-03-14" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer2::Logger::Capture \- Capture dancer logs
.SH "VERSION"
.IX Header "VERSION"
version 0.400000
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The basics:
.PP
.Vb 1
\&    set logger => "capture";
\&
\&    my $trap = dancer_app\->logger_engine\->trapper;
\&    my $logs = $trap\->read;
.Ve
.PP
A worked-out real-world example:
.PP
.Vb 2
\&    use Test::More tests => 2;
\&    use Dancer2;
\&
\&    set logger => \*(Aqcapture\*(Aq;
\&
\&    warning "Danger!  Warning!";
\&    debug   "I like pie.";
\&
\&    my $trap = dancer_app\->logger_engine\->trapper;
\&
\&    is_deeply $trap\->read, [
\&        { level => "warning", message => "Danger!  Warning!" },
\&        { level => "debug",   message => "I like pie.", }
\&    ];
\&
\&    # each call to read cleans the trap
\&    is_deeply $trap\->read, [];
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a logger class for Dancer2 which captures all logs to an object.
.PP
Its primary purpose is for testing. Here is an example of a test:
.PP
.Vb 6
\&    use strict;
\&    use warnings;
\&    use Test::More;
\&    use Plack::Test;
\&    use HTTP::Request::Common;
\&    use Ref::Util qw<is_coderef>;
\&
\&    {
\&        package App;
\&        use Dancer2;
\&
\&        set log       => \*(Aqdebug\*(Aq;
\&        set logger    => \*(Aqcapture\*(Aq;
\&
\&        get \*(Aq/\*(Aq => sub {
\&            log(debug => \*(Aqthis is my debug message\*(Aq);
\&            log(core  => \*(Aqthis should not be logged\*(Aq);
\&            log(info  => \*(Aqthis is my info message\*(Aq);
\&        };
\&    }
\&
\&    my $app = Dancer2\->psgi_app;
\&    ok( is_coderef($app), \*(AqGot app\*(Aq );
\&
\&    test_psgi $app, sub {
\&        my $cb = shift;
\&
\&        my $res = $cb\->( GET \*(Aq/\*(Aq );
\&
\&        my $trap = App\->dancer_app\->logger_engine\->trapper;
\&
\&        is_deeply $trap\->read, [
\&            { level => \*(Aqdebug\*(Aq, message => \*(Aqthis is my debug message\*(Aq },
\&            { level => \*(Aqinfo\*(Aq,  message => \*(Aqthis is my info message\*(Aq },
\&        ];
\&
\&        is_deeply $trap\->read, [];
\&    };
\&
\&    done_testing;
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "trapper"
.IX Subsection "trapper"
Returns the Dancer2::Logger::Capture::Trap object used to capture
and read logs.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Dancer2::Core::Role::Logger, Dancer2::Logger::Capture::Trap
.SH "AUTHOR"
.IX Header "AUTHOR"
Dancer Core Developers
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2022 by Alexis Sukrieh.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
