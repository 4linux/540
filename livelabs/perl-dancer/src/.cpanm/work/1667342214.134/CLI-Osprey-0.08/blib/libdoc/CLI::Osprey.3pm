.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CLI::Osprey 3pm"
.TH CLI::Osprey 3pm "2020-07-12" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CLI::Osprey \- MooX::Options + MooX::Cmd + Sanity
.SH "VERSION"
.IX Header "VERSION"
version 0.08
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
in Hello.pm
.PP
.Vb 3
\&    package Hello;
\&    use Moo;
\&    use CLI::Osprey;
\&
\&    option \*(Aqmessage\*(Aq => (
\&        is => \*(Aqro\*(Aq,
\&        format => \*(Aqs\*(Aq,
\&        doc => \*(AqThe message to display\*(Aq,
\&        default => \*(AqHello world!\*(Aq,
\&    );
\&
\&    sub run {
\&        my ($self) = @_;
\&        print $self\->message, "\en";
\&    }
.Ve
.PP
In hello.pl
.PP
.Vb 2
\&    use Hello;
\&    Hello\->new_with_options\->run;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
CLI::Osprey is a module to assist in writing commandline applications with M*
\&\s-1OO\s0 modules (Moose, Moo, Mo). With it, you structure your app as one or more
modules, which get instantiated with the commandline arguments as attributes.
Arguments are parsed using Getopt::Long::Descriptive, and both long and
short help messages as well as complete manual pages are automatically
generated. An app can be a single command with options, or have sub-commands
(like \f(CW\*(C`git\*(C'\fR). Sub-commands can be defined as modules (with options of their
own) or as simple coderefs.
.SS "Differences from MooX::Options"
.IX Subsection "Differences from MooX::Options"
Osprey is deliberately similar to MooX::Options, and porting an app that
uses MooX::Options to Osprey should be fairly simple in most cases. However
there are a few important differences:
.IP "\(bu" 4
Osprey is pure-perl, without any mandatory \s-1XS\s0 dependencies, meaning it can be
used in fatpacked scripts, and other situations where you may need to run on
diverse machines, where a C compiler and control over the ennvironment aren't
guaranteed.
.IP "\(bu" 4
Osprey's support for sub-commands is built-in from the beginning. We think this
makes for a better experience than MooX::Options + MooX::Cmd.
.IP "\(bu" 4
While MooX::Options requires an option's primary name to be the same as the
attribute that holds it, and MooX::Cmd derives a sub-command's name from the
name of the module that implements it, Osprey separates these, so that Perl
identifier naming conventions don't dictate your command line interface.
.IP "\(bu" 4
Osprey doesn't use an automatic module finder (like Module::Pluggable) to
locate modules for sub-commands; their names are given explicitly. This small
amount of additional typing gives you more control and less fragility.
.PP
There are also a few things MooX::Options has that Osprey lacks. While they may
be added in the future, I haven't seen the need yet. Currently known missing
feeatures are \s-1JSON\s0 options, \f(CW\*(C`config_from_file\*(C'\fR support, \f(CW\*(C`autosplit\*(C'\fR, and \f(CW\*(C`autorange\*(C'\fR.
.PP
For \s-1JSON\s0 support, you can use a coercion on the attribute, turning it from a
string to a ref via \f(CW\*(C`decode_json\*(C'\fR.
.PP
To default an app's options from a config file, you may want to do something
like this in your script file:
.PP
.Vb 2
\&    use JSON \*(Aqdecode_json\*(Aq;
\&    use Path::Tiny;
\&
\&    MyApp\->new_with_options(
\&        map decode_json(path($_)\->slurp),
\&        grep \-f,
\&        "$ENV{HOME}/.myapprc"
\&    )\->run;
.Ve
.PP
Provided that \f(CW\*(C`prefer_commandline\*(C'\fR is true (which is the default), any
options in \f(CW\*(C`.myapprc\*(C'\fR will be used as defaults if that file exists, but will
still be overrideable from the commandline.
.SH "IMPORTED METHODS"
.IX Header "IMPORTED METHODS"
The following methods, will be imported into a class that uses CLI::Osprey:
.SS "new_with_options"
.IX Subsection "new_with_options"
Parses commandline arguments, validates them, and calls the \f(CW\*(C`new\*(C'\fR method with
the resulting parameters. Any parameters passed to \f(CW\*(C`new_with_options\*(C'\fR will
also be passed to \f(CW\*(C`new\*(C'\fR; the \f(CW\*(C`prefer_commandline\*(C'\fR import option controls
which overrides which.
.SS "option"
.IX Subsection "option"
The \f(CW\*(C`option\*(C'\fR keyword acts like \f(CW\*(C`has\*(C'\fR (and accepts all of the arguments that
\&\f(CW\*(C`has\*(C'\fR does), but also registers the attribute as a commandline option. See
\&\*(L"\s-1OPTION PARAMETERS\*(R"\s0 for usage.
.ie n .SS "osprey_usage($code, @messages)"
.el .SS "osprey_usage($code, \f(CW@messages\fP)"
.IX Subsection "osprey_usage($code, @messages)"
Displays a short usage message, the same as if the app was invoked with the
\&\f(CW\*(C`\-h\*(C'\fR option. Also displays the lines of text in \f(CW@messages\fR if any are
passed. If \f(CW$code\fR is passed a defined value, exits with that as a status.
.SS "osprey_help($code)"
.IX Subsection "osprey_help($code)"
Displays a more substantial usage message, the same as if the app was invoked
with the \f(CW\*(C`\-\-help\*(C'\fR option. If \f(CW$code\fR is passed a defined value, exits with
that as a status.
.SS "osprey_man"
.IX Subsection "osprey_man"
Displays a manual page for the app, containing long descriptive text (if
provided) about each command and option, then exits.
.SH "IMPORT PARAMETERS"
.IX Header "IMPORT PARAMETERS"
The parameters to \f(CW\*(C`use CLI::Osprey\*(C'\fR serve two roles: to customize Osprey's
behavior, and to provide information about the app and its options for use in
the usage messages. They are:
.SS "abbreviate"
.IX Subsection "abbreviate"
Default: true.
.PP
If \f(CW\*(C`abbreviate\*(C'\fR is set to a true value, then long options can be abbreviated to
the point of uniqueness. That is, \f(CW\*(C`\-\-long\-option\-name\*(C'\fR can be called as
\&\f(CW\*(C`\-\-lon\*(C'\fR as long as there are no other options starting with those letters. An
option can always be called by its full name, even if it is a prefix of some
longer option's name. If \f(CW\*(C`abbreviate\*(C'\fR is false, options must always be called
by their full names (or by a defined short name).
.SS "added_order"
.IX Subsection "added_order"
Default: true.
.PP
If \f(CW\*(C`added_order\*(C'\fR is set to a true value, then two options with the same
\&\f(CW\*(C`order\*(C'\fR (or none at all) will appear in the help text in the same order as
their \f(CW\*(C`option\*(C'\fR keywords were executed. If it is false, they will appear in
alphabetical order instead.
.SS "desc"
.IX Subsection "desc"
Default: none.
.PP
A short description of the command, to be shown at the top of the manual
page, and in the listing of subcommands if this command is a subcommand.
.SS "description_pod"
.IX Subsection "description_pod"
Default: none.
.PP
A description, of any length, in \s-1POD\s0 format, to be included as the
\&\f(CW\*(C`DESCRIPTION\*(C'\fR section of the command's manual page.
.SS "extra_pod"
.IX Subsection "extra_pod"
Default: none.
.PP
Arbitrary extra \s-1POD\s0 to be included between the \f(CW\*(C`DESCRIPTION\*(C'\fR and
\&\f(CW\*(C`OPTIONS\*(C'\fR sections of the manual page.
.SS "getopt_options"
.IX Subsection "getopt_options"
Default: \f(CW\*(C`[\*(Aqrequire_order\*(Aq]\*(C'\fR.
.PP
Contains a list of options to control option parsing behavior (see
\&\*(L"Configuring Getopt::Long\*(R" in Getopt::Long). Note, however, that many of these
are not helpful with Osprey, and that using \f(CW\*(C`permute\*(C'\fR will likely break
subcommands entirely. MooX::Options calls this parameter \f(CW\*(C`flavour\*(C'\fR.
.SS "prefer_commandline"
.IX Subsection "prefer_commandline"
Default: true.
.PP
If true, command-line options override key/value pairs passed to
\&\f(CW\*(C`new_with_options\*(C'\fR. If false, the reverse is true.
.SS "preserve_argv"
.IX Subsection "preserve_argv"
Default: false.
.PP
If true, the \f(CW@ARGV\fR array will be localized for the duration of
\&\f(CW\*(C`new_with_options\*(C'\fR, and will be left in the same state after option parsing as
it was before. If false, the \f(CW@ARGV\fR array will be modified by option parsing,
removing any recognized options, values, and subcommands, and leaving behind
any positional parameters or anything after and including a \f(CW\*(C`\-\-\*(C'\fR separator.
.SS "usage_string"
.IX Subsection "usage_string"
Default: \f(CW"USAGE: $program_name %o"\fR
.PP
Provides the header of the usage message printed in response to the \f(CW\*(C`\-h\*(C'\fR
option or an error in option processing. The format of the string is described
in \*(L"$usage_desc\*(R" in Getopt::Long::Descriptive.
.SS "on_demand"
.IX Subsection "on_demand"
Default: false
.PP
If set to a true value, the commands' modules won't be loaded
at compile time, but if the command is invoked. This is useful for
minimizing compile time if the application has a lot of commands or
the commands are on the heavy side. Note that enabling the feature
may interfere with the ability to fatpack the application.
.SH "OPTION PARAMETERS"
.IX Header "OPTION PARAMETERS"
.SS "doc"
.IX Subsection "doc"
Default: None.
.PP
Documentation for the option, used in \f(CW\*(C`\-\-help\*(C'\fR output. For best results, should
be no more than a short paragraph.
.SS "format"
.IX Subsection "format"
Default: None (i.e. boolean).
.PP
The format of the option argument, same as Getopt::Long. An option with no
format is a boolean, not taking an additional argument. Other formats are:
.IP "s" 4
.IX Item "s"
string
.IP "i" 4
.IX Item "i"
decimal integer
.IP "o" 4
.IX Item "o"
integer (supports \f(CW\*(C`0x\*(C'\fR for hex, \f(CW\*(C`0b\*(C'\fR for binary, and \f(CW0\fR for octal).
.IP "f" 4
.IX Item "f"
floating-point number
.SS "format_doc"
.IX Subsection "format_doc"
Default: depends on \*(L"format\*(R".
.PP
Describes the type of an option's argument. For example, if the string option
\&\f(CW\*(C`copy\-to\*(C'\fR specifies a hostname, you can give it \f(CW\*(C`format_doc => "hostname"\*(C'\fR
and it will display as "\fB\-\-copy\-to\fR\ \fIhostname\fR\*(L" in the help text,
instead of \*(R"\fB\-\-copy\-to\fR\ \fIstring\fR".
.SS "hidden"
.IX Subsection "hidden"
Default: \fBfalse\fR.
.PP
A \f(CW\*(C`hidden\*(C'\fR option will be recognized, but not listed in automatically generated
documentation.
.SS "negatable"
.IX Subsection "negatable"
Default: \fBfalse\fR.
.PP
Adds the \f(CW\*(C`\-\-no\-\*(C'\fR version of the option, which sets it to a false value.
Equivalent to \f(CW\*(C`!\*(C'\fR in Getopt::Long.
.SS "option"
.IX Subsection "option"
Default: Same as the attribute name, with underscores replaced by hyphens.
.PP
Allows the command-line option for an attribute to differ from the attribute
name \*(-- like \f(CW\*(C`init_arg\*(C'\fR except for the commandline.
.SS "long_doc"
.IX Subsection "long_doc"
Default: none.
.PP
Long documentation of the option for the manual page. This is \s-1POD,\s0 so \s-1POD\s0
formatting is available, and paragraphs need to be separated by \f(CW"\en\en"\fR. If
not provided, the short documentation will be used instead.
.SS "order"
.IX Subsection "order"
Default: None.
.PP
Allows controlling the order that options are listed in the help text. Options
without an order attribute are sorted by the order their \f(CW\*(C`option\*(C'\fR statements
are executed, if \*(L"added_order\*(R" is true, and by alphabetical order otherwise.
They are placed as though they had order 9999, so use small values to sort
before automaticall-sorted options, and values of 10000 and up to sort at the
end.
.SS "repeatable"
.IX Subsection "repeatable"
Default: \fBfalse\fR.
.PP
Allows an option to be specified more than once. When used on a \*(L"boolean\*(R"
option with no \*(L"format\*(R", each appearace of the option will increment the value
by 1 (equivalent to \f(CW\*(C`+\*(C'\fR in Getopt::Long. When used on an option with
arguments, produces an arrayref, one value per appearance of the option.
.SS "required"
.IX Subsection "required"
Default: \fBfalse\fR.
.PP
This is a Moo/Moose feature honored by Osprey. A \f(CW\*(C`required\*(C'\fR attribute must be
passed on the commandline unless it's passed to the constructor. Generated
documentation will show the option as non-optional.
.SS "short"
.IX Subsection "short"
Default: None.
.PP
Gives an option a single-character \*(L"short\*(R" form, e.g. \f(CW\*(C`\-v\*(C'\fR for \f(CW\*(C`\-\-verbose\*(C'\fR.
.SS "spacer_before"
.IX Subsection "spacer_before"
Default: \fBfalse\fR.
.PP
Causes a blank line to appear before this option in help output.
.SS "spacer_after"
.IX Subsection "spacer_after"
Default: \fBfalse\fR.
.PP
Causes a blank line to appear after this option in help output.
.SH "SUBCOMMANDS"
.IX Header "SUBCOMMANDS"
An Osprey command can have subcommands with their own options, documentation,
etc., allowing for complicated applications under the roof of a single command.
Osprey will parse the options for all of the commands in the chain, and
construct them in top-to-bottom order, with each subcommand receiving a
reference to its parent.
.SS "Subcommand Classes"
.IX Subsection "Subcommand Classes"
A subcommand can be another class, which also uses \f(CW\*(C`CLI::Osprey\*(C'\fR. For example:
.PP
.Vb 3
\&    package MyApp;
\&    use Moo;
\&    use CLI::Osprey;
\&
\&    option verbose => (
\&        is => \*(Aqro\*(Aq,
\&        short => \*(Aqv\*(Aq,
\&    );
\&
\&    subcommand frobnicate => \*(AqMyApp::Frobnicate\*(Aq;
\&
\&    package MyApp::Frobnicate;
\&    use Moo;
\&    use CLI::Osprey;
\&
\&    option target => (
\&        is => \*(Aqro\*(Aq,
\&        format => \*(Aqs\*(Aq,
\&    );
\&
\&    sub run {
\&        my ($self) = @_;
\&        if ($self\->parent_command\->verbose) {
\&            say "Be dangerous, and unpredictable... and make a lot of noise.";
\&        }
\&        $self\->do_something_with($self\->target);
\&    }
.Ve
.SS "Inline Subcommands"
.IX Subsection "Inline Subcommands"
A subcommand can also be specified as a coderef, for when a separate class
would be excessive. For example:
.PP
.Vb 3
\&    package Greet;
\&    use Moo;
\&    use CLI::Osprey;
\&
\&    option target => (
\&        is => \*(Aqro\*(Aq,
\&        default => "world",
\&    );
\&
\&    subcommand hello => sub {
\&        my ($self, $parent) = @_;
\&        say "Hello ", $parent\->target;
\&    };
\&
\&    subcommand goodbye => sub {
\&        my ($self, $parent) = @_;
\&        say "Goodbye ", $parent\->target;
\&    };
.Ve
.PP
which can be invoked as \f(CW\*(C`greet \-\-target world hello\*(C'\fR. Inline subcommands are
implemented using CLI::Osprey::InlineSubcommand.
.SH "THANKS"
.IX Header "THANKS"
This module is based heavily on code from MooX::Options and takes strong
inspiration from MooX::Cmd and MooX::Options::Actions. Thanks to
celogeek, Jens Reshack, Getty, Tom Bloor, and all contributors to those
modules. Thanks to mst for prodding me to do this. Thanks Grinnz for helping
me update my dzillage.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andrew Rodland <arodland@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Andrew Rodland.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
