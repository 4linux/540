.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Template::Plugin::URL 3"
.TH Template::Plugin::URL 3 "2022-07-26" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Template::Plugin::URL \- Plugin to construct complex URLs
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    [% USE url(\*(Aq/cgi\-bin/foo.pl\*(Aq) %]
\&
\&    [% url(debug = 1, id = 123) %]
\&       # ==> /cgi/bin/foo.pl?debug=1&amp;id=123
\&
\&    [% USE mycgi = url(\*(Aq/cgi\-bin/bar.pl\*(Aq, mode=\*(Aqbrowse\*(Aq, debug=1) %]
\&
\&    [% mycgi %]
\&       # ==> /cgi/bin/bar.pl?mode=browse&amp;debug=1
\&
\&    [% mycgi(mode=\*(Aqsubmit\*(Aq) %]
\&       # ==> /cgi/bin/bar.pl?mode=submit&amp;debug=1
\&
\&    [% mycgi(debug=\*(Aqd2 p0\*(Aq, id=\*(AqD4\-2k[4]\*(Aq) %]
\&       # ==> /cgi\-bin/bar.pl?mode=browse&amp;debug=d2%20p0&amp;id=D4\-2k%5B4%5D
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`URL\*(C'\fR plugin can be used to construct complex URLs from a base stem
and a hash array of additional query parameters.
.PP
The constructor should be passed a base \s-1URL\s0 and optionally, a hash array
reference of default parameters and values.  Used from with a template,
it would look something like the following:
.PP
.Vb 3
\&    [% USE url(\*(Aqhttp://www.somewhere.com/cgi\-bin/foo.pl\*(Aq) %]
\&    [% USE url(\*(Aq/cgi\-bin/bar.pl\*(Aq, mode=\*(Aqbrowse\*(Aq) %]
\&    [% USE url(\*(Aq/cgi\-bin/baz.pl\*(Aq, mode=\*(Aqbrowse\*(Aq, debug=1) %]
.Ve
.PP
When the plugin is then called without any arguments, the default base
and parameters are returned as a formatted query string.
.PP
.Vb 1
\&    [% url %]
.Ve
.PP
For the above three examples, these will produce the following outputs:
.PP
.Vb 3
\&    http://www.somewhere.com/cgi\-bin/foo.pl
\&    /cgi\-bin/bar.pl?mode=browse
\&    /cgi\-bin/baz.pl?mode=browse&amp;debug=1
.Ve
.PP
Note that additional parameters are separated by '\f(CW\*(C`&amp;\*(C'\fR' rather than
simply '\f(CW\*(C`&\*(C'\fR'.  This is the correct behaviour for \s-1HTML\s0 pages but is,
unfortunately, incorrect when creating URLs that do not need to be
encoded safely for \s-1HTML.\s0  This is likely to be corrected in a future
version of the plugin (most probably with \s-1TT3\s0).  In the mean time, you
can set \f(CW$Template::Plugin::URL::JOINT\fR to \f(CW\*(C`&\*(C'\fR to get the correct
behaviour.
.PP
Additional parameters may be also be specified to the \s-1URL:\s0
.PP
.Vb 1
\&    [% url(mode=\*(Aqsubmit\*(Aq, id=\*(Aqwiz\*(Aq) %]
.Ve
.PP
Which, for the same three examples, produces:
.PP
.Vb 3
\&    http://www.somewhere.com/cgi\-bin/foo.pl?mode=submit&amp;id=wiz
\&    /cgi\-bin/bar.pl?mode=browse&amp;id=wiz
\&    /cgi\-bin/baz.pl?mode=browse&amp;debug=1&amp;id=wiz
.Ve
.PP
A new base \s-1URL\s0 may also be specified as the first option:
.PP
.Vb 1
\&    [% url(\*(Aq/cgi\-bin/waz.pl\*(Aq, test=1) %]
.Ve
.PP
producing
.PP
.Vb 3
\&    /cgi\-bin/waz.pl?test=1
\&    /cgi\-bin/waz.pl?mode=browse&amp;test=1
\&    /cgi\-bin/waz.pl?mode=browse&amp;debug=1&amp;test=1
.Ve
.PP
The ordering of the parameters is non-deterministic due to fact that
Perl's hashes themselves are unordered.  This isn't a problem as the
ordering of \s-1CGI\s0 parameters is insignificant (to the best of my knowledge).
All values will be properly escaped thanks to some code borrowed from
Lincoln Stein's \f(CW\*(C`CGI\*(C'\fR module.  e.g.
.PP
.Vb 2
\&    [% USE url(\*(Aq/cgi\-bin/woz.pl\*(Aq) %]
\&    [% url(name="Elrich von Benjy d\*(AqWeiro") %]
.Ve
.PP
Here the space and "\f(CW\*(C`\*(Aq\*(C'\fR" single quote characters are escaped in the output:
.PP
.Vb 1
\&    /cgi\-bin/woz.pl?name=Elrich%20von%20Benjy%20d%27Weiro
.Ve
.PP
An alternate name may be provided for the plugin at construction time
as per regular Template Toolkit syntax.
.PP
.Vb 2
\&    [% USE mycgi = url(\*(Aqcgi\-bin/min.pl\*(Aq) %]
\&    [% mycgi(debug=1) %]
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Wardley <abw@wardley.org> <http://wardley.org/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1996\-2022 Andy Wardley.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template::Plugin
