.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Template::Stash::Context 3"
.TH Template::Stash::Context 3 "2022-07-26" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Template::Stash::Context \- Experimetal stash allowing list/scalar context definition
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Template;
\&    use Template::Stash::Context;
\&
\&    my $stash = Template::Stash::Context\->new(\e%vars);
\&    my $tt2   = Template\->new({ STASH => $stash });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an alternate stash object which includes a patch from
Craig Barratt to implement various new virtual methods to allow
dotted template variable to denote if object methods and subroutines
should be called in scalar or list context.  It adds a little overhead
to each stash call and I'm a little wary of applying that to the core
default stash without investigating the effects first. So for now,
it's implemented as a separate stash module which will allow us to
test it out, benchmark it and switch it in or out as we require.
.PP
This is what Craig has to say about it:
.PP
Here's a better set of features for the core.  Attached is a new version
of Stash.pm (based on \s-1TT2.02\s0) that:
.PP
* supports the special op \*(L"scalar\*(R" that forces scalar context on
function calls, eg:
.PP
.Vb 1
\&    cgi.param("foo").scalar
.Ve
.PP
calls cgi.param(\*(L"foo\*(R") in scalar context (unlike my wimpy
scalar op from last night).  Array context is the default.
.PP
With non-function operands, scalar behaves like the perl
version (eg: no-op for scalar, size for arrays, etc).
.PP
* supports the special op \*(L"ref\*(R" that behaves like the perl ref.
If applied to a function the function is not called.  Eg:
.PP
.Vb 1
\&    cgi.param("foo").ref
.Ve
.PP
does *not* call cgi.param and evaluates to \*(L"\s-1CODE\*(R".\s0  Similarly,
\&\s-1HASH\s0.ref, \s-1ARRAY\s0.ref return what you expect.
.PP
* adds a new scalar and list op called \*(L"array\*(R" that is a no-op for
arrays and promotes scalars to one-element arrays.
.PP
* allows scalar ops to be applied to arrays and hashes in place,
eg: \s-1\fBARRAY\s0.repeat\fR\|(3) repeats each element in place.
.PP
* allows list ops to be applied to scalars by promoting the scalars
to one-element arrays (like an implicit \*(L"array\*(R").  So you can
do things like \s-1SCALAR\s0.size, \s-1SCALAR\s0.join and get a useful result.
.PP
This also means you can now use x.0 to safely get the first element
whether x is an array or scalar.
.PP
The new Stash.pm passes the \s-1TT2.02\s0 test suite.  But I haven't tested the
new features very much.  One nagging implementation problem is that the
\&\*(L"scalar\*(R" and \*(L"ref\*(R" ops have higher precedence than user variable names.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Wardley <abw@wardley.org>
.PP
<http://wardley.org/>
.SH "VERSION"
.IX Header "VERSION"
1.63, distributed as part of the
Template Toolkit version 3.100, released on 30 March 2020.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1996\-2022 Andy Wardley.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template::Stash
