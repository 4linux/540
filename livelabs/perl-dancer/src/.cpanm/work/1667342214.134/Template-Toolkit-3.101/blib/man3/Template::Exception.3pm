.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Template::Exception 3"
.TH Template::Exception 3 "2022-07-26" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Template::Exception \- Exception handling class module
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Template::Exception;
\&
\&    my $exception = Template::Exception\->new($type, $info);
\&    $type = $exception\->type;
\&    $info = $exception\->info;
\&    ($type, $info) = $exception\->type_info;
\&
\&    print $exception\->as_string();
\&
\&    $handler = $exception\->select_handler(\e@candidates);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Template::Exception\*(C'\fR module defines an object class for
representing exceptions within the template processing life cycle.
Exceptions can be raised by modules within the Template Toolkit, or
can be generated and returned by user code bound to template
variables.
.PP
Exceptions can be raised in a template using the \f(CW\*(C`THROW\*(C'\fR directive,
.PP
.Vb 1
\&    [% THROW user.login \*(Aqno user id: please login\*(Aq %]
.Ve
.PP
or by calling the \fBthrow()\fR method on the current
Template::Context object,
.PP
.Vb 2
\&    $context\->throw(\*(Aquser.passwd\*(Aq, \*(AqIncorrect Password\*(Aq);
\&    $context\->throw(\*(AqIncorrect Password\*(Aq);    # type \*(Aqundef\*(Aq
.Ve
.PP
or from Perl code by calling \f(CW\*(C`die()\*(C'\fR with a \f(CW\*(C`Template::Exception\*(C'\fR object,
.PP
.Vb 1
\&    die (Template::Exception\->new(\*(Aquser.denied\*(Aq, \*(AqInvalid User ID\*(Aq));
.Ve
.PP
or by simply calling \f(CW\*(C`die()\*(C'\fR with an error string.  This is
automagically caught and converted to an  exception of '\f(CW\*(C`undef\*(C'\fR'
type (that's the literal string '\f(CW\*(C`undef\*(C'\fR' rather than Perl's
undefined value) which can then be handled in the usual way.
.PP
.Vb 1
\&    die "I\*(Aqm sorry Dave, I can\*(Aqt do that";
.Ve
.PP
Each exception is defined by its type and a information component
(e.g. error message).  The type can be any identifying string and may
contain dotted components (e.g. '\f(CW\*(C`foo\*(C'\fR', '\f(CW\*(C`foo.bar\*(C'\fR', '\f(CW\*(C`foo.bar.baz\*(C'\fR').
Exception types are considered to be hierarchical such that '\f(CW\*(C`foo.bar\*(C'\fR'
would be a specific type of the more general '\f(CW\*(C`foo\*(C'\fR' type.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fBtype()\fP"
.IX Subsection "type()"
Returns the exception type.
.SS "\fBinfo()\fP"
.IX Subsection "info()"
Returns the exception information.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Wardley <abw@wardley.org> <http://wardley.org/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1996\-2022 Andy Wardley.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template, Template::Context
