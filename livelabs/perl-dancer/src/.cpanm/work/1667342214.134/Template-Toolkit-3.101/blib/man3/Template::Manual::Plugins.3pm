.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Template::Manual::Plugins 3"
.TH Template::Manual::Plugins 3 "2022-07-26" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Template::Manual::Plugins \- Standard plugins
.SH "TEMPLATE TOOLKIT PLUGINS"
.IX Header "TEMPLATE TOOLKIT PLUGINS"
The following plugin modules are distributed with the Template
Toolkit.  Some of the plugins interface to external modules (detailed
below) which should be downloaded from any \s-1CPAN\s0 site and installed
before using the plugin.
.SS "Assert"
.IX Subsection "Assert"
New in 2.20!  The Assert plugin adds an
\&\f(CW\*(C`assert\*(C'\fR virtual method that you can use to catch undefined values.
.PP
For example, consider this dotop:
.PP
.Vb 1
\&    [% user.name %]
.Ve
.PP
If \f(CW\*(C`user.name\*(C'\fR is an undefined value then \s-1TT\s0 will silently ignore the
fact and print nothing.  If you \f(CW\*(C`USE\*(C'\fR the \f(CW\*(C`assert\*(C'\fR plugin then you
can add the \f(CW\*(C`assert\*(C'\fR vmethod between the \f(CW\*(C`user\*(C'\fR and \f(CW\*(C`name\*(C'\fR elements,
like so:
.PP
.Vb 1
\&    [% user.assert.name %]
.Ve
.PP
Now, if \f(CW\*(C`user.name\*(C'\fR is an undefined value, an exception will be thrown:
.PP
.Vb 1
\&    assert error \- undefined value for name
.Ve
.SS "\s-1CGI\s0"
.IX Subsection "CGI"
The \s-1CGI\s0 plugin is a wrapper around Lincoln Stein's
\&\s-1CGI\s0.pm module. The plugin is distributed with the Template Toolkit (see
Template::Plugin::CGI) and the \s-1CGI\s0 module itself is distributed with
recent versions Perl, or is available from \s-1CPAN.\s0
.PP
.Vb 6
\&    [% USE CGI %]
\&    [% CGI.param(\*(Aqparam_name\*(Aq) %]
\&    [% CGI.start_form %]
\&    [% CGI.popup_menu( Name   => \*(Aqcolor\*(Aq,
\&                       Values => [ \*(AqGreen\*(Aq, \*(AqBrown\*(Aq ] ) %]
\&    [% CGI.end_form %]
.Ve
.SS "Datafile"
.IX Subsection "Datafile"
Provides an interface to data stored in a plain text file in a simple
delimited format.  The first line in the file specifies field names
which should be delimiter by any non-word character sequence.
Subsequent lines define data using the same delimiter as in the first
line.  Blank lines and comments (lines starting '#') are ignored.  See
Template::Plugin::Datafile for further details.
.PP
/tmp/mydata:
.PP
.Vb 5
\&    # define names for each field
\&    id : email : name : tel
\&    # here\*(Aqs the data
\&    fred : fred@here.com : Fred Smith : 555\-1234
\&    bill : bill@here.com : Bill White : 555\-5678
.Ve
.PP
example:
.PP
.Vb 1
\&    [% USE userlist = datafile(\*(Aq/tmp/mydata\*(Aq) %]
\&
\&    [% FOREACH user = userlist %]
\&       [% user.name %] ([% user.id %])
\&    [% END %]
.Ve
.SS "Date"
.IX Subsection "Date"
The Date plugin provides an easy way to generate
formatted time and date strings by delegating to the \s-1POSIX\s0 \f(CW\*(C`strftime()\*(C'\fR
routine. See Template::Plugin::Date and \s-1POSIX\s0 for further details.
.PP
.Vb 2
\&    [% USE date %]
\&    [% date.format %]           # current time/date
\&
\&    File last modified: [% date.format(template.modtime) %]
.Ve
.SS "Directory"
.IX Subsection "Directory"
The Directory plugin provides a simple
interface to a directory and the files within it. See
Template::Plugin::Directory for further details.
.PP
.Vb 7
\&    [% USE dir = Directory(\*(Aq/tmp\*(Aq) %]
\&    [% FOREACH file = dir.files %]
\&        # all the plain files in the directory
\&    [% END %]
\&    [% FOREACH file = dir.dirs %]
\&        # all the sub\-directories
\&    [% END %]
.Ve
.SS "\s-1DBI\s0"
.IX Subsection "DBI"
The \f(CW\*(C`DBI\*(C'\fR plugin is no longer distributed as part of the Template Toolkit
(as of version 2.15).  It is now available as a separate Template::DBI
distribution from \s-1CPAN.\s0
.SS "Dumper"
.IX Subsection "Dumper"
The Dumper plugin provides an interface to the
Data::Dumper module. See Template::Plugin::Dumper and Data::Dumper for
further details.
.PP
.Vb 2
\&    [% USE dumper(indent=0, pad="<br>") %]
\&    [% dumper.dump(myvar, yourvar) %]
.Ve
.SS "File"
.IX Subsection "File"
The File plugin provides a general abstraction for
files and can be used to fetch information about specific files within a
filesystem. See Template::Plugin::File for further details.
.PP
.Vb 4
\&    [% USE File(\*(Aq/tmp/foo.html\*(Aq) %]
\&    [% File.name %]     # foo.html
\&    [% File.dir %]      # /tmp
\&    [% File.mtime %]    # modification time
.Ve
.SS "Filter"
.IX Subsection "Filter"
This module implements a base class plugin which can be subclassed
to easily create your own modules that define and install new filters.
.PP
.Vb 1
\&    package MyOrg::Template::Plugin::MyFilter;
\&
\&    use Template::Plugin::Filter;
\&    use base qw( Template::Plugin::Filter );
\&
\&    sub filter {
\&        my ($self, $text) = @_;
\&        # ...mungify $text...
\&        return $text;
\&    }
.Ve
.PP
Example of use:
.PP
.Vb 2
\&    # now load it...
\&    [% USE MyFilter %]
\&
\&    # ...and use the returned object as a filter
\&    [% FILTER $MyFilter %]
\&      ...
\&    [% END %]
.Ve
.PP
See Template::Plugin::Filter for further details.
.SS "Format"
.IX Subsection "Format"
The Format plugin provides a simple way to format
text according to a \f(CW\*(C`printf()\*(C'\fR\-like format. See Template::Plugin::Format for
further details.
.PP
.Vb 2
\&    [% USE bold = format(\*(Aq<b>%s</b>\*(Aq) %]
\&    [% bold(\*(AqHello\*(Aq) %]
.Ve
.SS "\s-1GD\s0"
.IX Subsection "GD"
The \f(CW\*(C`GD\*(C'\fR plugins are no longer part of the core Template Toolkit distribution.
They are now available from \s-1CPAN\s0 in a separate Template::GD distribution.
.SS "\s-1HTML\s0"
.IX Subsection "HTML"
The \s-1HTML\s0 plugin is very basic, implementing a few
useful methods for generating \s-1HTML.\s0 It is likely to be extended in the future
or integrated with a larger project to generate \s-1HTML\s0 elements in a generic way.
.PP
.Vb 4
\&    [% USE HTML %]
\&    [% HTML.escape("if (a < b && c > d) ..." %]
\&    [% HTML.attributes(border => 1, cellpadding => 2) %]
\&    [% HTML.element(table => { border => 1, cellpadding => 2 }) %]
.Ve
.PP
See Template::Plugin::HTML for further details.
.SS "Iterator"
.IX Subsection "Iterator"
The Iterator plugin provides a way to create a
Template::Iterator object to iterate over a data set. An iterator is
created automatically by the \f(CW\*(C`FOREACH\*(C'\fR directive and is aliased to the \f(CW\*(C`loop\*(C'\fR
variable. This plugin allows an iterator to be explicitly created with a given
name, or the default plugin name, \f(CW\*(C`iterator\*(C'\fR. See
Template::Plugin::Iterator for further details.
.PP
.Vb 1
\&    [% USE iterator(list, args) %]
\&
\&    [% FOREACH item = iterator %]
\&       [% \*(Aq<ul>\*(Aq IF iterator.first %]
\&       <li>[% item %]
\&       [% \*(Aq</ul>\*(Aq IF iterator.last %]
\&    [% END %]
.Ve
.SS "Pod"
.IX Subsection "Pod"
This plugin provides an interface to the Pod::POM module
which parses \s-1POD\s0 documents into an internal object model which can
then be traversed and presented through the Template Toolkit.
.PP
.Vb 1
\&    [% USE Pod(podfile) %]
\&
\&    [% FOREACH head1 = Pod.head1;
\&         FOREACH head2 = head1/head2;
\&           ...
\&         END;
\&       END
\&    %]
.Ve
.SS "Scalar"
.IX Subsection "Scalar"
The Template Toolkit calls user-defined subroutines and object methods
using Perl's array context by default.
.PP
.Vb 2
\&    # TT2 calls object methods in array context by default
\&    [% object.method %]
.Ve
.PP
This plugin module provides a way for you to call subroutines and methods
in scalar context.
.PP
.Vb 1
\&    [% USE scalar %]
\&
\&    # force it to use scalar context
\&    [% object.scalar.method %]
\&
\&    # also works with subroutine references
\&    [% scalar.my_sub_ref %]
.Ve
.SS "String"
.IX Subsection "String"
The String plugin implements an object-oriented
interface for manipulating strings. See Template::Plugin::String for
further details.
.PP
.Vb 2
\&    [% USE String \*(AqHello\*(Aq %]
\&    [% String.append(\*(Aq World\*(Aq) %]
\&
\&    [% msg = String.new(\*(AqAnother string\*(Aq) %]
\&    [% msg.replace(\*(Aqstring\*(Aq, \*(Aqtext\*(Aq) %]
\&
\&    The string "[% msg %]" is [% msg.length %] characters long.
.Ve
.SS "Table"
.IX Subsection "Table"
The Table plugin allows you to format a list of
data items into a virtual table by specifying a fixed number of rows or
columns, with an optional overlap. See Template::Plugin::Table for further
details.
.PP
.Vb 1
\&    [% USE table(list, rows=10, overlap=1) %]
\&
\&    [% FOREACH item = table.col(3) %]
\&       [% item %]
\&    [% END %]
.Ve
.SS "\s-1URL\s0"
.IX Subsection "URL"
The \s-1URL\s0 plugin provides a simple way of constructing
URLs from a base part and a variable set of parameters. See
Template::Plugin::URL for further details.
.PP
.Vb 1
\&    [% USE mycgi = url(\*(Aq/cgi\-bin/bar.pl\*(Aq, debug=1) %]
\&
\&    [% mycgi %]
\&       # ==> /cgi/bin/bar.pl?debug=1
\&
\&    [% mycgi(mode=\*(Aqsubmit\*(Aq) %]
\&       # ==> /cgi/bin/bar.pl?mode=submit&debug=1
.Ve
.SS "Wrap"
.IX Subsection "Wrap"
The Wrap plugin uses the Text::Wrap module to
provide simple paragraph formatting. See Template::Plugin::Wrap and
Text::Wrap for further details.
.PP
.Vb 3
\&    [% USE wrap %]
\&    [% wrap(mytext, 40, \*(Aq* \*(Aq, \*(Aq  \*(Aq) %]  # use wrap sub
\&    [% mytext FILTER wrap(40) \-%]       # or wrap FILTER
.Ve
.PP
The \f(CW\*(C`Text::Wrap\*(C'\fR module is available from \s-1CPAN:\s0
.PP
.Vb 1
\&    http://www.cpan.org/modules/by\-module/Text/
.Ve
.SS "\s-1XML\s0"
.IX Subsection "XML"
The \f(CW\*(C`XML::DOM\*(C'\fR, \f(CW\*(C`XML::RSS\*(C'\fR, \f(CW\*(C`XML::Simple\*(C'\fR and \f(CW\*(C`XML::XPath\*(C'\fR plugins are no
longer distributed with the Template Toolkit as of version 2.15
.PP
They are now available in a separate Template::XML distribution.
