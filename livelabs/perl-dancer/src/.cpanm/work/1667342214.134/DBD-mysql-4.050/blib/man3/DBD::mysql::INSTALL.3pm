.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBD::mysql::INSTALL 3"
.TH DBD::mysql::INSTALL 3 "2018-10-07" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBD::mysql::INSTALL \- How to install and configure DBD::mysql
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  perl Makefile.PL [options]
\&  make
\&  make test
\&  make install
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes the installation and configuration of
DBD::mysql, the Perl \s-1DBI\s0 driver for the MySQL database. Before
reading on, make sure that you have the prerequisites available:
Perl, MySQL and \s-1DBI.\s0 For details see the separate section
\&\*(L"\s-1PREREQUISITES\*(R"\s0.
.PP
Depending on your version of Perl, it might be possible to
use a binary distribution of DBD::mysql. If possible, this is
recommended. Otherwise you need to install from the sources.
If so, you will definitely need a C compiler. Installation
from binaries and sources are both described in separate
sections. \*(L"\s-1BINARY INSTALLATION\*(R"\s0. \*(L"\s-1SOURCE INSTALLATION\*(R"\s0.
.PP
Finally, if you encounter any problems, do not forget to
read the section on known problems \*(L"\s-1KNOWN PROBLEMS\*(R"\s0. If
that doesn't help, you should check the section on \*(L"\s-1SUPPORT\*(R"\s0.
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
.IP "Perl" 4
.IX Item "Perl"
Preferably a version of Perl, that comes preconfigured with
your system. For example, all Linux and FreeBSD distributions
come with Perl. For Windows, use ActivePerl <https://www.activestate.com/activeperl> 
or Strawberry Perl <http://www.strawberryperl.com>.
.IP "MySQL" 4
.IX Item "MySQL"
You need not install the actual MySQL database server, the
client files and the development files are sufficient. For
example, Fedora Linux distribution comes with \s-1RPM\s0 files
(using \s-1YUM\s0) \fBmysql\fR and \fBmysql-server\fR (use \*(L"yum search\*(R"
to find exact package names). These are sufficient, if the MySQL
server is located on a foreign machine.  You may also create client
files by compiling from the MySQL source distribution and using
.Sp
.Vb 1
\&  configure \-\-without\-server
.Ve
.Sp
If you are using Windows and need to compile from sources
(which is only the case if you are not using ActivePerl or
Strawberry Perl),
then you must ensure that the header and library files are
installed. This may require choosing a \*(L"Custom installation\*(R"
and selecting the appropriate option when running the
MySQL setup program.
.IP "\s-1DBI\s0" 4
.IX Item "DBI"
DBD::mysql is a \s-1DBI\s0 driver, hence you need \s-1DBI.\s0 It is available
from the same source where you got the DBD::mysql distribution
from.
.IP "C compiler" 4
.IX Item "C compiler"
A C compiler is only required if you install from source. In
most cases there are binary distributions of DBD::mysql
available. However, if you need a C compiler, make sure, that
it is the same C compiler that was used for compiling Perl and
MySQL! Otherwise you will almost definitely encounter problems
because of differences in the underlying C runtime libraries.
.Sp
In the worst case, this might mean to compile Perl and MySQL
yourself. But believe me, experience shows that a lot of problems
are fixed this way.
.IP "Gzip libraries" 4
.IX Item "Gzip libraries"
Late versions of MySQL come with support for compression. Thus
it \fBmay\fR be required that you have install an \s-1RPM\s0 package like
libz-devel, libgz-devel or something similar.
.SH "BINARY INSTALLATION"
.IX Header "BINARY INSTALLATION"
Binary installation is possible in the most cases, depending
on your system.
.SS "Windows"
.IX Subsection "Windows"
\fIStrawberry Perl\fR
.IX Subsection "Strawberry Perl"
.PP
Strawberry Perl comes bundled with DBD::mysql and the needed
client libraries.
.PP
\fIActiveState Perl\fR
.IX Subsection "ActiveState Perl"
.PP
ActivePerl offers a \s-1PPM\s0 archive of DBD::mysql. All you need to
do is typing in a cmd.exe window:
.PP
.Vb 1
\&  ppm install DBD\-mysql
.Ve
.PP
This will fetch the module via \s-1HTTP\s0 and install them. If you
need to use a \s-1WWW\s0 proxy server, the environment variable
HTTP_proxy must be set:
.PP
.Vb 2
\&  set HTTP_proxy=http://myproxy.example.com:8080/
\&  ppm install DBD\-mysql
.Ve
.PP
Of course you need to replace the host name \f(CW\*(C`myproxy.example.com\*(C'\fR
and the port number \f(CW8080\fR with your local values.
.PP
If the above procedure doesn't work, please upgrade to the latest
version of ActivePerl. ActiveState has a policy where it only
provides access free-of-charge for the \s-1PPM\s0 mirrors of the last
few stable Perl releases. If you have an older perl, you'd either
need to upgrade your perl or contact ActiveState about a subscription.
.SS "Red Hat Enterprise Linux (\s-1RHEL\s0), CentOS and Fedora"
.IX Subsection "Red Hat Enterprise Linux (RHEL), CentOS and Fedora"
Red Hat Enterprise Linux, its community derivatives such as
CentOS, and Fedora come with MySQL and DBD::mysql.
.PP
Use the following command to install DBD::mysql:
.PP
.Vb 1
\&    yum install "perl(DBD::mysql)"
.Ve
.SS "Debian and Ubuntu"
.IX Subsection "Debian and Ubuntu"
On Debian, Ubuntu and derivatives you can install DBD::mysql from
the repositories with the following command:
.PP
.Vb 1
\&    sudo apt\-get install libdbd\-mysql\-perl
.Ve
.SS "\s-1SLES\s0 and openSUSE"
.IX Subsection "SLES and openSUSE"
On \s-1SUSE\s0 Linux Enterprise and the community version openSUSE, you
can install DBD::mysql from the repositories with the following
command:
.PP
.Vb 1
\&    zypper install perl\-DBD\-mysql
.Ve
.SS "Other systems"
.IX Subsection "Other systems"
In the case of other Linux or FreeBSD distributions it is very likely
that all you need comes with your distribution.
I just cannot give you names, as I am not using
these systems.
.PP
Please let me know if you find the files in your favorite
Linux or FreeBSD distribution so that I can extend the above list.
.SH "SOURCE INSTALLATION"
.IX Header "SOURCE INSTALLATION"
So you need to install from sources. If you are lucky, the Perl
module \f(CW\*(C`CPAN\*(C'\fR will do all for you, thanks to the excellent work
of Andreas KÃ¶nig. Otherwise you will need to do a manual
installation.
All of these installation types have their own section:
\&\*(L"\s-1CPAN\s0 installation\*(R", \*(L"Manual installation\*(R" and \*(L"Configuration\*(R".
.PP
The DBD::mysql Makefile.PL needs to know where to find your MySQL
installation. This may be achieved using command line switches
(see \*(L"Configuration\*(R") or automatically using the mysql_config binary
which comes with most MySQL distributions. If your MySQL distribution
contains mysql_config the easiest method is to ensure this binary
is on your path.
.PP
Typically, this is the case if you've installed the mysql library
from your systems' package manager.
.PP
e.g.
.PP
.Vb 2
\&  PATH=$PATH:/usr/local/mysql/bin
\&  export PATH
.Ve
.PP
As stated, to compile DBD::mysql you'll need a C compiler. This should
be the same compiler as the one used to build perl \s-1AND\s0 the mysql client
libraries. If you're on linux, this is most typically the case and you
need not worry. If you're on \s-1UNIX\s0 systems, you might want to pay
attention.
.PP
Also you'll need to get the MySQL client and development headers on
your system. The easiest is to get these from your package manager.
.PP
To run the tests that ship with the module, you'll need access to a
running MySQL server. This can be running on localhost, but it can also
be on a remote machine.
.PP
On Fedora the process is as follows. Please note that Fedora actually
ships with MariaDB but not with MySQL. This is not a problem, it
will work just as well.
In this example we install and start a local server for running the
tests against.
.PP
.Vb 3
\&    yum \-y install make gcc mariadb\-devel mariadb\-libs mariadb\-server
\&    yum \-y install "perl(Test::Deep)" "perl(Test::More)"
\&    systemctl start mariadb.service
.Ve
.SS "Environment Variables"
.IX Subsection "Environment Variables"
For ease of use, you can set environment variables for
DBD::mysql installation. You can set any or all of the options, and
export them by putting them in your .bashrc or the like:
.PP
.Vb 12
\&    export DBD_MYSQL_CFLAGS=\-I/usr/local/mysql/include/mysql
\&    export DBD_MYSQL_LIBS="\-L/usr/local/mysql/lib/mysql \-lmysqlclient"
\&    export DBD_MYSQL_EMBEDDED=
\&    export DBD_MYSQL_CONFIG=mysql_config
\&    export DBD_MYSQL_NOCATCHSTDERR=0
\&    export DBD_MYSQL_NOFOUNDROWS=0
\&    export DBD_MYSQL_NOSSL=
\&    export DBD_MYSQL_TESTDB=test
\&    export DBD_MYSQL_TESTHOST=localhost
\&    export DBD_MYSQL_TESTPASSWORD=s3kr1+
\&    export DBD_MYSQL_TESTPORT=3306
\&    export DBD_MYSQL_TESTUSER=me
.Ve
.PP
The most useful may be the host, database, port, socket, user, and password.
.PP
Installation will first look to your mysql_config, and then your
environment variables, and then it will guess with intelligent defaults.
.SS "\s-1CPAN\s0 installation"
.IX Subsection "CPAN installation"
Installation of DBD::mysql can be incredibly easy:
.PP
.Vb 1
\&  cpan DBD::mysql
.Ve
.PP
Please note that this will only work if the prerequisites are
fulfilled, which means you have a C\-compiler installed, and you
have the development headers and mysql client libraries available
on your system.
.PP
If you are using the \s-1CPAN\s0 module for the first time, just answer
the questions by accepting the defaults which are fine in most
cases.
.PP
If you cannot get the \s-1CPAN\s0 module working, you might try manual
installation. If installation with \s-1CPAN\s0 fails because the your local
settings have been guessed wrong, you need to ensure MySQL's
mysql_config is on your path (see \*(L"\s-1SOURCE INSTALLATION\*(R"\s0) or
alternatively create a script called \f(CW\*(C`mysql_config\*(C'\fR. This is
described in more details later. \*(L"Configuration\*(R".
.SS "Manual installation"
.IX Subsection "Manual installation"
For a manual installation you need to fetch the DBD::mysql
source distribution. The latest version is always available
from
.PP
.Vb 1
\&  https://metacpan.org/module/DBD::mysql
.Ve
.PP
The name is typically something like
.PP
.Vb 1
\&  DBD\-mysql\-4.025.tar.gz
.Ve
.PP
The archive needs to be extracted. On Windows you may use a tool
like 7\-zip, on *nix you type
.PP
.Vb 1
\&  tar xf DBD\-mysql\-4.025.tar.gz
.Ve
.PP
This will create a subdirectory DBD\-mysql\-4.025. Enter this
subdirectory and type
.PP
.Vb 3
\&  perl Makefile.PL
\&  make
\&  make test
.Ve
.PP
(On Windows you may need to replace \*(L"make\*(R" with \*(L"dmake\*(R" or
\&\*(L"nmake\*(R".) If the tests seem to look fine, you may continue with
.PP
.Vb 1
\&  make install
.Ve
.PP
If the compilation (make) or tests fail, you might need to
configure some settings.
.PP
For example you might choose a different database, the C
compiler or the linker might need some flags. \*(L"Configuration\*(R".
\&\*(L"Compiler flags\*(R". \*(L"Linker flags\*(R".
.PP
For Cygwin there is a special section below.
\&\*(L"Cygwin\*(R".
.SS "Configuration"
.IX Subsection "Configuration"
The install script \*(L"Makefile.PL\*(R" can be configured via a lot of
switches. All switches can be used on the command line. For
example, the test database:
.PP
.Vb 1
\&  perl Makefile.PL \-\-testdb=<db>
.Ve
.PP
If you do not like configuring these switches on the command
line, you may alternatively create a script called \f(CW\*(C`mysql_config\*(C'\fR.
This is described later on.
.PP
Available switches are:
.IP "testdb" 4
.IX Item "testdb"
Name of the test database, defaults to \fBtest\fR.
.IP "testuser" 4
.IX Item "testuser"
Name of the test user, defaults to empty. If the name is empty,
then the currently logged in users name will be used.
.IP "testpassword" 4
.IX Item "testpassword"
Password of the test user, defaults to empty.
.IP "testhost" 4
.IX Item "testhost"
Host name or \s-1IP\s0 number of the test database; defaults to localhost.
.IP "testport" 4
.IX Item "testport"
Port number of the test database
.IP "ps\-protcol=1 or 0" 4
.IX Item "ps-protcol=1 or 0"
Whether to run the test suite using server prepared statements or driver
emulated prepared statements. ps\-protocol=1 means use server prepare,
ps\-protocol=0 means driver emulated.
.IP "cflags" 4
.IX Item "cflags"
This is a list of flags that you want to give to the C compiler.
The most important flag is the location of the MySQL header files.
For example, on Red Hat Linux the header files are in /usr/include/mysql
and you might try
.Sp
.Vb 1
\&  \-I/usr/include/mysql
.Ve
.Sp
On Windows the header files may be in C:\emysql\einclude and you might try
.Sp
.Vb 1
\&  \-IC:\emysql\einclude
.Ve
.Sp
The default flags are determined by running
.Sp
.Vb 1
\&  mysql_config \-\-cflags
.Ve
.Sp
More details on the C compiler flags can be found in the following
section. \*(L"Compiler flags\*(R".
.IP "libs" 4
.IX Item "libs"
This is a list of flags that you want to give to the linker
or loader. The most important flags are the locations and names
of additional libraries. For example, on Red Hat Linux your
MySQL client libraries are in /usr/lib/mysql and you might try
.Sp
.Vb 1
\&  \-L/usr/lib/mysql \-lmysqlclient \-lz
.Ve
.Sp
On Windows the libraries may be in C:\emysql\elib and
.Sp
.Vb 1
\&  \-LC:\emysql\elib \-lmysqlclient
.Ve
.Sp
might be a good choice. The default flags are determined by running
.Sp
.Vb 1
\&  mysql_config \-\-libs
.Ve
.Sp
More details on the linker flags can be found in a separate section.
\&\*(L"Linker flags\*(R".
.PP
If a switch is not present on the command line, then the
script \f(CW\*(C`mysql_config\*(C'\fR will be executed. This script comes
as part of the MySQL distribution. For example, to determine
the C compiler flags, we are executing
.PP
.Vb 2
\&  mysql_config \-\-cflags
\&  mysql_config \-\-libs
.Ve
.PP
If you want to configure your own settings for database name,
database user and so on, then you have to create a script with
the same name, that replies
.SS "Compiler flags"
.IX Subsection "Compiler flags"
Note: the following info about compiler and linker flags, you shouldn't have
to use these options because Makefile.PL is pretty good at utilizing
mysql_config to get the flags that you need for a successful compile.
.PP
It is typically not so difficult to determine the appropriate
flags for the C compiler. The linker flags, which you find in
the next section, are another story.
.PP
The determination of the C compiler flags is usually left to
a configuration script called \fImysql_config\fR, which can be
invoked with
.PP
.Vb 1
\&  mysql_config \-\-cflags
.Ve
.PP
When doing so, it will emit a line with suggested C compiler
flags, for example like this:
.PP
.Vb 1
\&  \-L/usr/include/mysql
.Ve
.PP
The C compiler must find some header files. Header files have
the extension \f(CW\*(C`.h\*(C'\fR. MySQL header files are, for example,
\&\fImysql.h\fR and \fImysql_version.h\fR. In most cases the header
files are not installed by default. For example, on Windows
it is an installation option of the MySQL setup program
(Custom installation), whether the header files are installed
or not. On Red Hat Linux, you need to install an \s-1RPM\s0 archive
\&\fImysql-devel\fR or \fIMySQL-devel\fR.
.PP
If you know the location of the header files, then you will
need to add an option
.PP
.Vb 1
\&  \-L<header directory>
.Ve
.PP
to the C compiler flags, for example \f(CW\*(C`\-L/usr/include/mysql\*(C'\fR.
.SS "Linker flags"
.IX Subsection "Linker flags"
Appropriate linker flags are the most common source of problems
while installing DBD::mysql. I will only give a rough overview,
you'll find more details in the troubleshooting section.
\&\*(L"\s-1KNOWN PROBLEMS\*(R"\s0
.PP
The determination of the C compiler flags is usually left to
a configuration script called \fImysql_config\fR, which can be
invoked with
.PP
.Vb 1
\&  mysql_config \-\-libs
.Ve
.PP
When doing so, it will emit a line with suggested C compiler
flags, for example like this:
.PP
.Vb 1
\&   \-L\*(Aq/usr/lib/mysql\*(Aq \-lmysqlclient \-lnsl \-lm \-lz \-lcrypt
.Ve
.PP
The following items typically need to be configured for the
linker:
.IP "The mysqlclient library" 4
.IX Item "The mysqlclient library"
The MySQL client library comes as part of the MySQL distribution.
Depending on your system it may be a file called
.Sp
.Vb 4
\&  F<libmysqlclient.a>   statically linked library, Unix
\&  F<libmysqlclient.so>  dynamically linked library, Unix
\&  F<mysqlclient.lib>    statically linked library, Windows
\&  F<mysqlclient.dll>    dynamically linked library, Windows
.Ve
.Sp
or something similar.
.Sp
As in the case of the header files, the client library is typically
not installed by default. On Windows you will need to select them
while running the MySQL setup program (Custom installation). On
Red Hat Linux an \s-1RPM\s0 archive \fImysql-devel\fR or \fIMySQL-devel\fR must
be installed.
.Sp
The linker needs to know the location and name of the mysqlclient
library. This can be done by adding the flags
.Sp
.Vb 1
\&  \-L<lib directory> \-lmysqlclient
.Ve
.Sp
or by adding the complete path name. Examples:
.Sp
.Vb 2
\&  \-L/usr/lib/mysql \-lmysqlclient
\&  \-LC:\emysql\elib \-lmysqlclient
.Ve
.Sp
If you would like to use the static libraries (and there are
excellent reasons to do so), you need to create a separate
directory, copy the static libraries to that place and use
the \-L switch above to point to your new directory. For example:
.Sp
.Vb 7
\&  mkdir /tmp/mysql\-static
\&  cp /usr/lib/mysql/*.a /tmp/mysql\-static
\&  perl Makefile.PL \-\-libs="\-L/tmp/mysql\-static \-lmysqlclient"
\&  make
\&  make test
\&  make install
\&  rm \-rf /tmp/mysql\-static
.Ve
.IP "The gzip library" 4
.IX Item "The gzip library"
The MySQL client can use compression when talking to the MySQL
server, a nice feature when sending or receiving large texts over
a slow network.
.Sp
On Unix you typically find the appropriate file name by running
.Sp
.Vb 2
\&  ldconfig \-p | grep libz
\&  ldconfig \-p | grep libgz
.Ve
.Sp
Once you know the name (libz.a or libgz.a is best), just add it
to the list of linker flags. If this seems to be causing problem
you may also try to link without gzip libraries.
.SH "ENCRYPTED CONNECTIONS via SSL"
.IX Header "ENCRYPTED CONNECTIONS via SSL"
Connecting to your servers over an encrypted connection (\s-1SSL\s0) is only possible
if you enabled this setting at build time. Since version 4.034, this is the
default.
.PP
Attempting to connect to a server that requires an encrypted connection without
first having DBD::mysql compiled with the \f(CW\*(C`\-\-ssl\*(C'\fR option will result in
an error that makes things appear as if your password is incorrect.
.PP
If you want to compile DBD::mysql without \s-1SSL\s0 support, which you might
probably only want if you for some reason can't install libssl headers, you
can do this by passing the \f(CW\*(C`\-\-nossl\*(C'\fR option to Makefile.PL or by setting the
\&\s-1DBD_MYSQL_NOSSL\s0 environment variable to '1'.
.SH "MARIADB NATIVE CLIENT INSTALLATION"
.IX Header "MARIADB NATIVE CLIENT INSTALLATION"
The MariaDB native client is another option for connecting to a MySQLÂ·
database licensed \s-1LGPL 2.1.\s0 To build DBD::mysql against this client, you
will first need to build the client. Generally, this is done with
the following:
.PP
.Vb 4
\&  cd path/to/src/mariadb\-native\-client
\&  cmake \-G "Unix Makefiles\*(Aq
\&  make
\&  sudo make install
.Ve
.PP
Once the client is built and installed, you can build DBD::mysql against
it:
.PP
.Vb 4
\&  perl Makefile.PL \-\-testuser=xxx \-\-testpassword=xxx \-\-testsocket=/path/to//mysqld.sock \-\-mysql_config=/usr/local/bin/mariadb_configÂ·
\&  make
\&  make test
\&  make install
.Ve
.SH "SPECIAL SYSTEMS"
.IX Header "SPECIAL SYSTEMS"
Below you find information on particular systems:
.SS "macOS"
.IX Subsection "macOS"
For installing DBD::mysql you need to have the libssl header files and the
mysql client libs. The easiest way to install these is using Homebrew
(<https://brew.sh/>).
.PP
Once you have Homebrew set up, you can simply install the dependencies using
.PP
.Vb 1
\&    brew install openssl mysql\-connector\-c
.Ve
.PP
Then you can install DBD::mysql using your cpan client.
.SS "Cygwin"
.IX Subsection "Cygwin"
If you are a user of Cygwin you already
know, it contains a nicely running perl 5.6.1, installation of
additional modules usually works like a charm via the standard
procedure of
.PP
.Vb 4
\&    perl makefile.PL
\&    make
\&    make test
\&    make install
.Ve
.PP
The Windows binary distribution of MySQL runs smoothly under Cygwin.
You can start/stop the server and use all Windows clients without problem.
But to install DBD::mysql you have to take a little special action.
.PP
Don't attempt to build DBD::mysql against either the MySQL Windows or
Linux/Unix \s-1BINARY\s0 distributions: neither will work!
.PP
You \s-1MUST\s0 compile the MySQL clients yourself under Cygwin, to get a
\&'libmysqlclient.a' compiled under Cygwin. Really! You'll only need
that library and the header files, you don't need any other client parts.
Continue to use the Windows binaries. And don't attempt (currently) to
build the MySQL Server part, it is unnecessary, as MySQL \s-1AB\s0 does an
excellent job to deliver optimized binaries for the mainstream
operating systems, and it is told, that the server compiled under Cygwin is
unstable.
.PP
Install a MySQL server for testing against. You can install the regular
Windows MySQL server package on your Windows machine, or you can also
test against a MySQL server on a remote host.
.PP
\fIBuild MySQL clients under Cygwin:\fR
.IX Subsection "Build MySQL clients under Cygwin:"
.PP
download the MySQL \s-1LINUX\s0 source from
<https://www.mysql.com/downloads>,
unpack mysql\-<version>.tar.gz into some tmp location and from this directory
run configure:
.PP
.Vb 1
\&  ./configure \-\-prefix=/usr/local/mysql \-\-without\-server
.Ve
.PP
This prepares the Makefile with the installed Cygwin features. It
takes some time, but should finish without error. The 'prefix', as
given, installs the whole Cygwin/MySQL thingy into a location not
normally in your \s-1PATH,\s0 so that you continue to use already installed
Windows binaries. The \-\-without\-server parameter tells configure to
only build the clients.
.PP
.Vb 1
\&  make
.Ve
.PP
This builds all MySQL client parts ... be patient. It should finish
finally without any error.
.PP
.Vb 1
\&  make install
.Ve
.PP
This installs the compiled client files under /usr/local/mysql/.
Remember, you don't need anything except the library under
/usr/local/mysql/lib and the headers under /usr/local/mysql/include!
.PP
Essentially you are now done with this part. If you want, you may try
your compiled binaries shortly; for that, do:
.PP
.Vb 2
\&  cd /usr/local/mysql/bin
\&  ./mysql \-h 127.0.0.1
.Ve
.PP
The host (\-h) parameter 127.0.0.1 targets the local host, but forces
the mysql client to use a \s-1TCP/IP\s0 connection. The default would be a
pipe/socket connection (even if you say '\-h localhost') and this
doesn't work between Cygwin and Windows (as far as I know).
.PP
If you have your MySQL server running on some other box, then please
substitute '127.0.0.1' with the name or IP-number of that box.
.PP
Please note, in my environment the 'mysql' client did not accept a
simple \s-1RETURN, I\s0 had to use CTRL-RETURN to send commands
\&... strange,
but I didn't attempt to fix that, as we are only interested in the
built lib and headers.
.PP
At the 'mysql>' prompt do a quick check:
.PP
.Vb 4
\&  mysql> use mysql
\&  mysql> show tables;
\&  mysql> select * from db;
\&  mysql> exit
.Ve
.PP
You are now ready to build DBD::mysql!
.PP
\fIcompile DBD::mysql\fR
.IX Subsection "compile DBD::mysql"
.PP
download and extract DBD\-mysql\-<version>.tar.gz from \s-1CPAN\s0
.PP
cd into unpacked dir DBD\-mysql\-<version>
you probably did that already, if you are reading this!
.PP
.Vb 1
\&  cp /usr/local/mysql/bin/mysql_config .
.Ve
.PP
This copies the executable script mentioned in the DBD::mysql docs
from your just built Cywin/MySQL client directory; it knows about
your Cygwin installation, especially about the right libraries to link
with.
.PP
.Vb 1
\&  perl Makefile.PL \-\-testhost=127.0.0.1
.Ve
.PP
The \-\-testhost=127.0.0.1 parameter again forces a \s-1TCP/IP\s0 connection
to the MySQL server on the local host instead of a pipe/socket
connection for the 'make test' phase.
.PP
.Vb 1
\&  make
.Ve
.PP
This should run without error
.PP
.Vb 2
\&  make test
\&  make install
.Ve
.PP
This installs DBD::mysql into the Perl hierarchy.
.SH "KNOWN PROBLEMS"
.IX Header "KNOWN PROBLEMS"
.SS "no gzip on your system"
.IX Subsection "no gzip on your system"
Some Linux distributions don't come with a gzip library by default.
Running \*(L"make\*(R" terminates with an error message like
.PP
.Vb 8
\&  LD_RUN_PATH="/usr/lib/mysql:/lib:/usr/lib" gcc
\&    \-o blib/arch/auto/DBD/mysql/mysql.so  \-shared
\&    \-L/usr/local/lib dbdimp.o mysql.o \-L/usr/lib/mysql
\&    \-lmysqlclient \-lm \-L/usr/lib/gcc\-lib/i386\-redhat\-linux/2.96
\&    \-lgcc \-lz
\&  /usr/bin/ld: cannot find \-lz
\&  collect2: ld returned 1 exit status
\&  make: *** [blib/arch/auto/DBD/mysql/mysql.so] Error 1
.Ve
.PP
If this is the case for you, install an \s-1RPM\s0 archive like
libz-devel, libgz-devel, zlib-devel or gzlib-devel or something
similar.
.SS "different compiler for mysql and perl"
.IX Subsection "different compiler for mysql and perl"
If Perl was compiled with gcc or egcs, but MySQL was compiled
with another compiler or on another system, an error message like
this is very likely when running \*(L"Make test\*(R":
.PP
.Vb 5
\&  t/00base............install_driver(mysql) failed: Can\*(Aqt load
\&  \*(Aq../blib/arch/auto/DBD/mysql/mysql.so\*(Aq for module DBD::mysql:
\&  ../blib/arch/auto/DBD/mysql/mysql.so: undefined symbol: _umoddi3
\&  at /usr/local/perl\-5.005/lib/5.005/i586\-linux\-thread/DynaLoader.pm
\&  line 168.
.Ve
.PP
This means, that your linker doesn't include libgcc.a. You have
the following options:
.PP
The solution is telling the linker to use libgcc. Run
.PP
.Vb 1
\&  gcc \-\-print\-libgcc\-file
.Ve
.PP
to determine the exact location of libgcc.a or for older versions
of gcc
.PP
.Vb 1
\&  gcc \-v
.Ve
.PP
to determine the directory. If you know the directory, add a
.PP
.Vb 1
\&  \-L<directory> \-lgcc
.Ve
.PP
to the list of C compiler flags. \*(L"Configuration\*(R". \*(L"Linker flags\*(R".
.SH "SUPPORT"
.IX Header "SUPPORT"
Finally, if everything else fails, you are not alone. First of
all, for an immediate answer, you should look into the archives
of the dbi-users mailing list, which is available at
<http://groups.google.com/group/perl.dbi.users?hl=en&lr=>
.PP
To subscribe to this list, send and email to
.PP
.Vb 1
\&    dbi\-users\-subscribe@perl.org
.Ve
.PP
If you don't find an appropriate posting and reply in the
mailing list, please post a question. Typically a reply will
be seen within one or two days.
