.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Plack::App::CGIBin 3"
.TH Plack::App::CGIBin 3 "2022-09-05" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Plack::App::CGIBin \- cgi\-bin replacement for Plack servers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Plack::App::CGIBin;
\&  use Plack::Builder;
\&
\&  my $app = Plack::App::CGIBin\->new(root => "/path/to/cgi\-bin")\->to_app;
\&  builder {
\&      mount "/cgi\-bin" => $app;
\&  };
\&
\&  # Or from the command line
\&  plackup \-MPlack::App::CGIBin \-e \*(AqPlack::App::CGIBin\->new(root => "/path/to/cgi\-bin")\->to_app\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Plack::App::CGIBin allows you to load \s-1CGI\s0 scripts from a directory and
convert them into a \s-1PSGI\s0 application.
.PP
This would give you the extreme easiness when you have bunch of old
\&\s-1CGI\s0 scripts that is loaded using \fIcgi-bin\fR of Apache web server.
.SH "HOW IT WORKS"
.IX Header "HOW IT WORKS"
This application checks if a given file path is a perl script and if
so, uses CGI::Compile to compile a \s-1CGI\s0 script into a sub (like
ModPerl::Registry) and then run it as a persistent application
using CGI::Emulate::PSGI.
.PP
If the given file is not a perl script, it executes the script just
like a normal \s-1CGI\s0 script with fork & exec. This is like a normal web
server mode and no performance benefit is achieved.
.PP
The default mechanism to determine if a given file is a Perl script is
as follows:
.IP "\(bu" 4
Check if the filename ends with \f(CW\*(C`.pl\*(C'\fR. If yes, it is a Perl script.
.IP "\(bu" 4
Open the file and see if the shebang (first line of the file) contains
the word \f(CW\*(C`perl\*(C'\fR (like \f(CW\*(C`#!/usr/bin/perl\*(C'\fR). If yes, it is a Perl
script.
.PP
You can customize this behavior by passing \f(CW\*(C`exec_cb\*(C'\fR callback, which
takes a file path to its first argument.
.PP
For example, if your perl-based \s-1CGI\s0 script uses lots of global
variables and such and are not ready to run on a persistent
environment, you can do:
.PP
.Vb 4
\&  my $app = Plack::App::CGIBin\->new(
\&      root => "/path/to/cgi\-bin",
\&      exec_cb => sub { 1 },
\&  )\->to_app;
.Ve
.PP
to always force the execute option for any files.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tatsuhiko Miyagawa
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Plack::App::File CGI::Emulate::PSGI CGI::Compile Plack::App::WrapCGI
.PP
See also Plack::App::WrapCGI if you compile one \s-1CGI\s0 script into a
\&\s-1PSGI\s0 application without serving \s-1CGI\s0 scripts from a directory, to
remove overhead of filesystem lookups, etc.
