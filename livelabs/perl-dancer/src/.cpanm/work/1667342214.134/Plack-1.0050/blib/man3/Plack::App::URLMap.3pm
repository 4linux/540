.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Plack::App::URLMap 3"
.TH Plack::App::URLMap 3 "2022-09-05" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Plack::App::URLMap \- Map multiple apps in different paths
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Plack::App::URLMap;
\&
\&  my $app1 = sub { ... };
\&  my $app2 = sub { ... };
\&  my $app3 = sub { ... };
\&
\&  my $urlmap = Plack::App::URLMap\->new;
\&  $urlmap\->map("/" => $app1);
\&  $urlmap\->map("/foo" => $app2);
\&  $urlmap\->map("http://bar.example.com/" => $app3);
\&
\&  my $app = $urlmap\->to_app;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Plack::App::URLMap is a \s-1PSGI\s0 application that can dispatch multiple
applications based on \s-1URL\s0 path and host names (a.k.a \*(L"virtual hosting\*(R")
and takes care of rewriting \f(CW\*(C`SCRIPT_NAME\*(C'\fR and \f(CW\*(C`PATH_INFO\*(C'\fR (See
\&\*(L"\s-1HOW THIS WORKS\*(R"\s0 for details). This module is inspired by
Ruby's Rack::URLMap.
.SH "METHODS"
.IX Header "METHODS"
.IP "map" 4
.IX Item "map"
.Vb 2
\&  $urlmap\->map("/foo" => $app);
\&  $urlmap\->map("http://bar.example.com/" => $another_app);
.Ve
.Sp
Maps \s-1URL\s0 path or an absolute \s-1URL\s0 to a \s-1PSGI\s0 application. The match
order is sorted by host name length and then path length (longest strings
first).
.Sp
\&\s-1URL\s0 paths need to match from the beginning and should match completely
until the path separator (or the end of the path). For example, if you
register the path \f(CW\*(C`/foo\*(C'\fR, it \fIwill\fR match with the request \f(CW\*(C`/foo\*(C'\fR,
\&\f(CW\*(C`/foo/\*(C'\fR or \f(CW\*(C`/foo/bar\*(C'\fR but it \fIwon't\fR match with \f(CW\*(C`/foox\*(C'\fR.
.Sp
Mapping URLs with host names is also possible, and in that case the \s-1URL\s0
mapping works like a virtual host.
.Sp
Mappings will nest.  If \f(CW$app\fR is already mapped to \f(CW\*(C`/baz\*(C'\fR it will
match a request for \f(CW\*(C`/foo/baz\*(C'\fR but not \f(CW\*(C`/foo\*(C'\fR. See \*(L"\s-1HOW THIS
WORKS\*(R"\s0 for more details.
.IP "mount" 4
.IX Item "mount"
Alias for \f(CW\*(C`map\*(C'\fR.
.IP "to_app" 4
.IX Item "to_app"
.Vb 1
\&  my $handler = $urlmap\->to_app;
.Ve
.Sp
Returns the \s-1PSGI\s0 application code reference. Note that the
Plack::App::URLMap object is callable (by overloading the code
dereference), so returning the object itself as a \s-1PSGI\s0 application
should also work.
.SH "PERFORMANCE"
.IX Header "PERFORMANCE"
If you \f(CW\*(C`map\*(C'\fR (or \f(CW\*(C`mount\*(C'\fR with Plack::Builder) N applications,
Plack::App::URLMap will need to at most iterate through N paths to
match incoming requests.
.PP
It is a good idea to use \f(CW\*(C`map\*(C'\fR only for a known, limited amount of
applications, since mounting hundreds of applications could affect
runtime request performance.
.SH "DEBUGGING"
.IX Header "DEBUGGING"
You can set the environment variable \f(CW\*(C`PLACK_URLMAP_DEBUG\*(C'\fR to see how
this application matches with the incoming request host names and
paths.
.SH "HOW THIS WORKS"
.IX Header "HOW THIS WORKS"
This application works by \fIfixing\fR \f(CW\*(C`SCRIPT_NAME\*(C'\fR and \f(CW\*(C`PATH_INFO\*(C'\fR
before dispatching the incoming request to the relocated
applications.
.PP
Say you have a Wiki application that takes \f(CW\*(C`/index\*(C'\fR and \f(CW\*(C`/page/*\*(C'\fR
and makes a \s-1PSGI\s0 application \f(CW$wiki_app\fR out of it, using one of
supported web frameworks, you can put the whole application under
\&\f(CW\*(C`/wiki\*(C'\fR by:
.PP
.Vb 2
\&  # MyWikiApp looks at PATH_INFO and handles /index and /page/*
\&  my $wiki_app = sub { MyWikiApp\->run(@_) };
\&  
\&  use Plack::App::URLMap;
\&  my $app = Plack::App::URLMap\->new;
\&  $app\->mount("/wiki" => $wiki_app);
.Ve
.PP
When a request comes in with \f(CW\*(C`PATH_INFO\*(C'\fR set to \f(CW\*(C`/wiki/page/foo\*(C'\fR,
the URLMap application \f(CW$app\fR strips the \f(CW\*(C`/wiki\*(C'\fR part from
\&\f(CW\*(C`PATH_INFO\*(C'\fR and \fBappends\fR that to \f(CW\*(C`SCRIPT_NAME\*(C'\fR.
.PP
That way, if the \f(CW$app\fR is mounted under the root
(i.e. \f(CW\*(C`SCRIPT_NAME\*(C'\fR is \f(CW""\fR) with standalone web servers like
Starman, \f(CW\*(C`SCRIPT_NAME\*(C'\fR is now locally set to \f(CW\*(C`/wiki\*(C'\fR and
\&\f(CW\*(C`PATH_INFO\*(C'\fR is changed to \f(CW\*(C`/page/foo\*(C'\fR when \f(CW$wiki_app\fR gets called.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tatsuhiko Miyagawa
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Plack::Builder
