.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Plack::Middleware::XSendfile 3"
.TH Plack::Middleware::XSendfile 3 "2022-09-05" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Plack::Middleware::XSendfile \- Sets X\-Sendfile (or a like) header for frontends
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  enable "Plack::Middleware::XSendfile";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When the body is a blessed reference with a \f(CW\*(C`path\*(C'\fR method, then the
return value of that method is used to set the X\-Sendfile header.
.PP
The body is set to an empty list, and the Content-Length header is
set to 0.
.PP
If the X\-Sendfile header is already set, then the body and
Content-Length will be untouched.
.PP
You should use IO::File::WithPath or Plack::Util's
\&\f(CW\*(C`set_io_path\*(C'\fR to add \f(CW\*(C`path\*(C'\fR method to an \s-1IO\s0 object in the body.
.PP
See <http://github.com/rack/rack\-contrib/blob/master/lib/rack/contrib/sendfile.rb>
for the frontend configuration.
.PP
Plack::Middleware::XSendfile does not set the Content-Type header.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.IP "variation" 4
.IX Item "variation"
The header tag to use. If unset, the environment key
\&\f(CW\*(C`plack.xsendfile.type\*(C'\fR will be used, then the \f(CW\*(C`HTTP_X_SENDFILE_TYPE\*(C'\fR
header.
.Sp
Supported values are:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`X\-Accel\-Redirect\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`X\-Lighttpd\-Send\-File\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`X\-Sendfile\*(C'\fR.
.RE
.RS 4
.Sp
An unsupport value will log an error.
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Tatsuhiko Miyagawa
