.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PLACKUP 1"
.TH PLACKUP 1 "2022-09-05" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
plackup \- Run PSGI application with Plack handlers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # read your app from app.psgi file
\&  plackup
\&
\&  # choose .psgi file from ARGV[0] (or with \-a option)
\&  plackup hello.psgi
\&
\&  # switch server implementation with \-\-server (or \-s)
\&  plackup \-\-server HTTP::Server::Simple \-\-port 9090 \-\-host 127.0.0.1 test.psgi
\&
\&  # use UNIX socket to run FCGI daemon
\&  plackup \-s FCGI \-\-listen /tmp/fcgi.sock myapp.psgi
\&
\&  # launch FCGI external server on port 9090
\&  plackup \-s FCGI \-\-port 9090
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
plackup is a command line utility to run \s-1PSGI\s0 applications from the command
line.
.PP
plackup automatically figures out the environment it is run in, and
runs your application in that environment. FastCGI, \s-1CGI,\s0 AnyEvent and
others can all be detected. See Plack::Loader for the authoritative
list.
.PP
\&\f(CW\*(C`plackup\*(C'\fR assumes you have an \f(CW\*(C`app.psgi\*(C'\fR script in your current directory.
The last statement of \f(CW\*(C`app.psgi\*(C'\fR should be a code reference that is a \s-1PSGI\s0
application:
.PP
.Vb 4
\&  #!/usr/bin/perl
\&  use MyApp;
\&  my $application = MyApp\->new;
\&  my $app = sub { $application\->run_psgi(@_) };
.Ve
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
.IP ".psgi" 4
.IX Item ".psgi"
.Vb 1
\&  plackup \-\-host 127.0.0.1 \-\-port 9090 /path/to/app.psgi
.Ve
.Sp
The first non-option argument is used as a \f(CW\*(C`.psgi\*(C'\fR file path. You can
also set this path with \f(CW\*(C`\-a\*(C'\fR or \f(CW\*(C`\-\-app\*(C'\fR. If omitted, the
default file path is \f(CW\*(C`app.psgi\*(C'\fR in the current directory.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-a, \-\-app" 4
.IX Item "-a, --app"
Specifies the full path to a \f(CW\*(C`.psgi\*(C'\fR script. You may alternately provide this
path as the first argument to \f(CW\*(C`plackup\*(C'\fR.
.IP "\-e" 4
.IX Item "-e"
Evaluates the given perl code as a \s-1PSGI\s0 app, much like perl's \f(CW\*(C`\-e\*(C'\fR
option:
.Sp
.Vb 1
\&  plackup \-e \*(Aqsub { my $env = shift; return [ ... ] }\*(Aq
.Ve
.Sp
It is also handy when you want to run a custom application like Plack::App::*.
.Sp
.Vb 1
\&  plackup \-MPlack::App::File \-e \*(AqPlack::App::File\->new(...)\->to_app\*(Aq
.Ve
.Sp
You can also specify \f(CW\*(C`\-e\*(C'\fR option with \f(CW\*(C`.psgi\*(C'\fR file path to wrap the
application with middleware configuration from the command line. You
can also use Plack::Builder \s-1DSL\s0 syntax inside \f(CW\*(C`\-e\*(C'\fR code. For example:
.Sp
.Vb 1
\&  plackup \-e \*(Aqenable "Auth::Basic", authenticator => ...;\*(Aq myapp.psgi
.Ve
.Sp
is equivalent to the \s-1PSGI\s0 application:
.Sp
.Vb 2
\&  use Plack::Builder;
\&  use Plack::Util;
\&  
\&  builder {
\&      enable "Auth::Basic", authenticator => ...;
\&      Plack::Util::load_psgi("myapp.psgi");
\&  };
.Ve
.Sp
Note that when you use \f(CW\*(C`\-e\*(C'\fR option to enable middleware, plackup
doesn't assume the implicit \f(CW\*(C`app.psgi\*(C'\fR path. You must either pass the
path to your \f(CW\*(C`.psgi\*(C'\fR file in the command line arguments or load the
application inside \f(CW\*(C`\-e\*(C'\fR after the \f(CW\*(C`enable\*(C'\fR.
.Sp
.Vb 4
\&  plackup                                # Runs app.psgi
\&  plackup \-e \*(Aqenable "Foo"\*(Aq              # Doesn\*(Aqt work!
\&  plackup \-e \*(Aqenable "Foo"\*(Aq app.psgi     # Works
\&  plackup \-e \*(Aqenable "Foo"; sub { ... }\*(Aq # Works
.Ve
.IP "\-o, \-\-host" 4
.IX Item "-o, --host"
Binds to a \s-1TCP\s0 interface. Defaults to undef, which lets most server backends
bind to the any (*) interface. This option is only valid for servers which support
\&\s-1TCP\s0 sockets.
.IP "\-p, \-\-port" 4
.IX Item "-p, --port"
Binds to a \s-1TCP\s0 port. Defaults to 5000. This option is only valid for servers
which support \s-1TCP\s0 sockets.
.Sp
Note: default port 5000 may conflict with AirPlay server on MacOS 12 (Monterey)
or later.
.ie n .IP "\-s, \-\-server, the ""PLACK_SERVER"" environment variable" 4
.el .IP "\-s, \-\-server, the \f(CWPLACK_SERVER\fR environment variable" 4
.IX Item "-s, --server, the PLACK_SERVER environment variable"
Selects a specific server implementation to run on. When provided, the \f(CW\*(C`\-s\*(C'\fR or
\&\f(CW\*(C`\-\-server\*(C'\fR flag will be preferred over the environment variable.
.Sp
If no option is given, plackup will try to detect the \fIbest\fR server
implementation based on the environment variables as well as modules loaded by
your application in \f(CW%INC\fR. See Plack::Loader for details.
.IP "\-S, \-\-socket" 4
.IX Item "-S, --socket"
Listens on a \s-1UNIX\s0 domain socket path. Defaults to undef. This option is only
valid for servers which support \s-1UNIX\s0 sockets.
.IP "\-l, \-\-listen" 4
.IX Item "-l, --listen"
Listens on one or more addresses, whether \*(L"\s-1HOST:PORT\*(R", \*(L":PORT\*(R",\s0 or \*(L"\s-1PATH\*(R"\s0
(without colons). You may use this option multiple times to listen on multiple
addresses, but the server will decide whether it supports multiple interfaces.
.IP "\-D, \-\-daemonize" 4
.IX Item "-D, --daemonize"
Makes the process run in the background. It's up to the backend server/handler
implementation whether this option is respected or not.
.IP "\-I" 4
.IX Item "-I"
Specifies Perl library include paths, like \f(CW\*(C`perl\*(C'\fR's \-I option. You may add
multiple paths by using this option multiple times.
.IP "\-M" 4
.IX Item "-M"
Loads the named modules before loading the app's code. You may load multiple
modules by using this option multiple times.
.Sp
In combination with \f(CW\*(C`\-r\*(C'\fR or \f(CW\*(C`\-R\*(C'\fR may not have the desired restart effect
when the loaded module is changed in the development directory. To avoid
this problem you need to load the module with the app code using \f(CW\*(C`\-e\*(C'\fR.
.ie n .IP "\-E, \-\-env, the ""PLACK_ENV"" environment variable." 4
.el .IP "\-E, \-\-env, the \f(CWPLACK_ENV\fR environment variable." 4
.IX Item "-E, --env, the PLACK_ENV environment variable."
Specifies the environment option. Setting this value with \f(CW\*(C`\-E\*(C'\fR or \f(CW\*(C`\-\-env\*(C'\fR
also writes to the \f(CW\*(C`PLACK_ENV\*(C'\fR environment variable. This allows applications
or frameworks to tell which environment setting the application is running on.
.Sp
.Vb 3
\&  # These two are the same
\&  plackup \-E deployment
\&  env PLACK_ENV=deployment plackup
.Ve
.Sp
Common values are \f(CW\*(C`development\*(C'\fR, \f(CW\*(C`deployment\*(C'\fR, and \f(CW\*(C`test\*(C'\fR. The default value
is \f(CW\*(C`development\*(C'\fR, which causes \f(CW\*(C`plackup\*(C'\fR to load the middleware components:
\&\fIAccessLog\fR, \fIStackTrace\fR, and \fILint\fR unless \f(CW\*(C`\-\-no\-default\-middleware\*(C'\fR
is set.
.IP "\-\-no\-default\-middleware" 4
.IX Item "--no-default-middleware"
This prevents loading the default middleware stack even when Plack
environment (i.e. \f(CW\*(C`\-E\*(C'\fR or \f(CW\*(C`PLACK_ENV\*(C'\fR) is set to \f(CW\*(C`development\*(C'\fR.
.IP "\-r, \-\-reload" 4
.IX Item "-r, --reload"
Makes plackup restart the server whenever a file in your development directory
changes. This option by default watches the \f(CW\*(C`lib\*(C'\fR directory and the base
directory where \fI.psgi\fR file is located. Use \f(CW\*(C`\-R\*(C'\fR to watch other
directories.
.Sp
Reloading will delay the compilation of your application. Automatic server
detection (see \f(CW\*(C`\-s\*(C'\fR above) may not behave as you expect, if plackup needs to
scan your application for the modules it uses. Avoid problems by specifying
\&\f(CW\*(C`\-s\*(C'\fR explicitly when using \f(CW\*(C`\-r\*(C'\fR or \f(CW\*(C`\-R\*(C'\fR.
.Sp
To avoid problems with changes to preloaded modules see documentation for \f(CW\*(C`\-M\*(C'\fR.
.IP "\-R, \-\-Reload" 4
.IX Item "-R, --Reload"
Makes plackup restart the server whenever a file in any of the given
directories changes. \f(CW\*(C`\-R\*(C'\fR and \f(CW\*(C`\-\-Reload\*(C'\fR take a comma-separated list of
paths:
.Sp
.Vb 1
\&  plackup \-R /path/to/project/lib,/path/to/project/templates
.Ve
.Sp
To avoid problems with changes to preloaded modules see documentation for \f(CW\*(C`\-M\*(C'\fR.
.IP "\-L, \-\-loader" 4
.IX Item "-L, --loader"
Specifies the server loading subclass that implements how to run the server.
Available options are \fIPlack::Loader\fR (default), \fIRestarter\fR (automatically
set when \f(CW\*(C`\-r\*(C'\fR or \f(CW\*(C`\-R\*(C'\fR is used), \fIDelayed\fR, and \fIShotgun\fR.
.Sp
See Plack::Loader::Delayed and Plack::Loader::Shotgun for more details.
.IP "\-\-access\-log" 4
.IX Item "--access-log"
Specifies the pathname of a file where the access log should be written.  By
default, in the development environment access logs will go to \s-1STDERR.\s0
.IP "\-\-path" 4
.IX Item "--path"
Specify the root path of your app (\f(CW\*(C`SCRIPT_NAME\*(C'\fR in \s-1PSGI\s0 env) to
run. The following two commands are roughly the same.
.Sp
.Vb 2
\&  plackup \-\-path /foo app.psgi
\&  plackup \-e \*(Aqmount "/foo" => Plack::Util::load_psgi("app.psgi")\*(Aq
.Ve
.PP
Other options that starts with \f(CW\*(C`\-\-\*(C'\fR are passed through to the backend server.
See each Plack::Handler backend's documentation for more details on their
available options.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Plack::Runner Plack::Loader
