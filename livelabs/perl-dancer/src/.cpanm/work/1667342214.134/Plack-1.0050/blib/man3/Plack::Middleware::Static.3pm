.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Plack::Middleware::Static 3"
.TH Plack::Middleware::Static 3 "2022-09-05" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Plack::Middleware::Static \- serve static files with Plack
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Plack::Builder;
\&
\&  builder {
\&      enable "Plack::Middleware::Static",
\&          path => qr{^/(images|js|css)/}, root => \*(Aq./htdocs/\*(Aq;
\&      $app;
\&  };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This middleware allows your Plack-based application to serve static files.
.PP
Note that if you are building an app using Plack::App::URLMap, you should
consider using Plack::App::File to serve static files instead. This makes
the overall routing of your application simpler to understand.
.PP
With this middleware, if a static file exists for the requested path, it will
be served. If it does not exist, by default this middleware returns a 404, but
you can set the \f(CW\*(C`pass_through\*(C'\fR option to change this behavior.
.PP
If the requested document is not within the \f(CW\*(C`root\*(C'\fR or the file is there but
not readable, this middleware will return a 403 Forbidden response.
.PP
The content type returned will be determined from the file extension by using
Plack::MIME or using \f(CW\*(C`content_type\*(C'\fR.
.SH "CONFIGURATIONS"
.IX Header "CONFIGURATIONS"
.IP "path, root" 4
.IX Item "path, root"
.Vb 2
\&  enable "Plack::Middleware::Static",
\&      path => qr{^/static/}, root => \*(Aqhtdocs/\*(Aq;
.Ve
.Sp
The \f(CW\*(C`path\*(C'\fR option specifies the \s-1URL\s0 pattern (regular expression) or a
callback to match against requests. If the <path> option matches, the
middleware looks in \f(CW\*(C`root\*(C'\fR to find the static files to serve. The default
value of \f(CW\*(C`root\*(C'\fR is the current directory.
.Sp
This example configuration serves \f(CW\*(C`/static/foo.jpg\*(C'\fR from
\&\f(CW\*(C`htdocs/static/foo.jpg\*(C'\fR. Note that the matched portion of the path,
\&\f(CW\*(C`/static/\*(C'\fR, still appears in the locally mapped path under \f(CW\*(C`root\*(C'\fR. If you
don't want this to happen, you can use a callback to munge the path as you
match it:
.Sp
.Vb 2
\&  enable "Plack::Middleware::Static",
\&      path => sub { s!^/static/!! }, root => \*(Aqstatic\-files/\*(Aq;
.Ve
.Sp
The callback should operate on \f(CW$_\fR and return a true or false value. Any
changes it makes to \f(CW$_\fR are used when looking for the static file in the
\&\f(CW\*(C`root\*(C'\fR.
.Sp
The configuration above serves \f(CW\*(C`/static/foo.png\*(C'\fR from
\&\f(CW\*(C`static\-files/foo.png\*(C'\fR, not \f(CW\*(C`static\-files/static/foo.png\*(C'\fR. The callback
specified in the \f(CW\*(C`path\*(C'\fR option matches against \f(CW$_\fR munges this value using
\&\f(CW\*(C`s///\*(C'\fR. The substitution operator returns the number of matches it made, so it
will return true when the path matches \f(CW\*(C`^/static\*(C'\fR.
.Sp
For more complex static handling in the \f(CW\*(C`path\*(C'\fR callback, in addition
to \f(CW$_\fR being set the callback receives two arguments, \f(CW\*(C`PATH_INFO\*(C'\fR
(same as \f(CW$_\fR) and \f(CW$env\fR.
.Sp
If you want to map multiple static directories from different roots, simply
add this middleware multiple times with different configuration options.
.IP "pass_through" 4
.IX Item "pass_through"
When this option is set to a true value, then this middleware will never
return a 404 if it cannot find a matching file. Instead, it will simply pass
the request on to the application it is wrapping.
.IP "content_type" 4
.IX Item "content_type"
The \f(CW\*(C`content_type\*(C'\fR option can be used to provide access to a different \s-1MIME\s0 
database than Plack::MIME.
Plack::MIME works fast and good for a list of well known file endings, 
but if you need a more accurate content based checking you can use modules
like File::MimeInfo or File::MMagic for example.
The callback should work on \f(CW$_\fR[0] which is the filename of the file.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tokuhiro Matsuno, Tatsuhiko Miyagawa
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Plack::Middleware Plack::Builder
