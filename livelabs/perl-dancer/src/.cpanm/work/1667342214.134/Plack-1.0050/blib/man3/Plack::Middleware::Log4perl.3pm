.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Plack::Middleware::Log4perl 3"
.TH Plack::Middleware::Log4perl 3 "2022-09-05" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Plack::Middleware::Log4perl \- Uses Log::Log4perl to configure logger
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  my $app = sub {
\&      my $env =  shift;
\&
\&      $env\->{\*(Aqpsgix.logger\*(Aq}({ level => \*(Aqerror\*(Aq, message => \*(AqHi\*(Aq });
\&
\&      return [
\&          \*(Aq200\*(Aq,
\&          [ \*(AqContent\-Type\*(Aq => \*(Aqtext/plain\*(Aq ],
\&          [ "Hello World" ],
\&      ];
\&  };
\&
\&
\&  # Use your own Log4perl configuration
\&  use Log::Log4perl;
\&  Log::Log4perl::init(\*(Aq/path/to/log4perl.conf\*(Aq);
\&
\&  builder {
\&      # tell the logger to log with \*(Aqplack\*(Aq category
\&      enable "Log4perl", category => "plack";
\&      $app;
\&  }
\&
\&
\&  # Configure with Log4perl middleware options
\&  builder {
\&      enable "Log4perl", category => "plack", conf => \*(Aq/path/to/log4perl.conf\*(Aq;
\&      $app;
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Log4perl is a Plack::Middleware component that allows you to use
Log::Log4perl to configure the logging object \f(CW\*(C`psgix.logger\*(C'\fR for a
given category.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.IP "category" 4
.IX Item "category"
The \f(CW\*(C`log4perl\*(C'\fR category to send logs to. Defaults to \f(CW\*(Aq\*(Aq\fR which means
it send to the root logger.
.IP "conf" 4
.IX Item "conf"
The configuration file path (or a scalar ref containing the config
string) for Log::Log4perl to automatically configure.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tatsuhiko Miyagawa
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Log::Log4perl
.PP
Plack::Middleware::LogDispatch
