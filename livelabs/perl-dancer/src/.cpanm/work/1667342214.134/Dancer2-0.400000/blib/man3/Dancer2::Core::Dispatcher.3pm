.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dancer2::Core::Dispatcher 3"
.TH Dancer2::Core::Dispatcher 3 "2022-03-14" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer2::Core::Dispatcher \- Class for dispatching request to the appropriate route handler
.SH "VERSION"
.IX Header "VERSION"
version 0.400000
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Dancer2::Core::Dispatcher;
\&
\&    # Create an instance of dispatcher
\&    my $dispatcher = Dancer2::Core::Dispatcher\->new( apps => [$app] );
\&
\&    # Dispatch a request
\&    my $resp = $dispatcher\->dispatch($env)\->to_psgi;
\&
\&    # Capture internal error of a response (if any) after a dispatch
\&    $dispatcher\->response_internal_error($app, $error);
\&
\&    # Capture response not found for an application the after dispatch
\&    $dispatcher\->response_not_found($env);
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "apps"
.IX Subsection "apps"
The apps is an array reference to Dancer2::Core::App.
.SS "default_content_type"
.IX Subsection "default_content_type"
The default_content_type is a string which represents the context of the
request. This attribute is read-only.
.SH "METHODS"
.IX Header "METHODS"
.SS "dispatch"
.IX Subsection "dispatch"
The \f(CW\*(C`dispatch\*(C'\fR method accepts the list of applications, hash reference for
the \fBenv\fR attribute of Dancer2::Core::Request and optionally the request
object and an env as input arguments.
.PP
\&\f(CW\*(C`dispatch\*(C'\fR returns a response object of Dancer2::Core::Response.
.PP
Any before hook and matched route code is wrapped to allow \s-1DSL\s0 keywords such
as forward and redirect to short-circuit remaining code, returning across
multiple stack frames without having to throw an exception.
.SS "response_internal_error"
.IX Subsection "response_internal_error"
The \f(CW\*(C`response_internal_error\*(C'\fR takes as input the list of applications and
a variable error and returns an object of Dancer2::Core::Error.
.SS "response_not_found"
.IX Subsection "response_not_found"
The \f(CW\*(C`response_not_found\*(C'\fR consumes as input the list of applications and an
object of type Dancer2::Core::App and returns an object
Dancer2::Core::Error.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dancer Core Developers
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2022 by Alexis Sukrieh.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
