.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dancer2::FileUtils 3"
.TH Dancer2::FileUtils 3 "2022-03-14" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer2::FileUtils \- File utility helpers
.SH "VERSION"
.IX Header "VERSION"
version 0.400000
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Dancer2::FileUtils qw/dirname path path_or_empty/;
\&
\&    # for \*(Aqpath/to/file\*(Aq
\&    my $dir  = dirname($path); # returns \*(Aqpath/to\*(Aq
\&    my $path = path($path);    # returns \*(Aq/abs/path/to/file\*(Aq
\&    my $path = path_or_empty($path);    # returns \*(Aq\*(Aq if file doesn\*(Aqt exist
\&
\&
\&    use Dancer2::FileUtils qw/path read_file_content/;
\&
\&    my $content = read_file_content( path( \*(Aqfolder\*(Aq, \*(Aqfolder\*(Aq, \*(Aqfile\*(Aq ) );
\&    my @content = read_file_content( path( \*(Aqfolder\*(Aq, \*(Aqfolder\*(Aq, \*(Aqfile\*(Aq ) );
\&
\&
\&    use Dancer2::FileUtils qw/read_glob_content set_file_mode/;
\&
\&    open my $fh, \*(Aq<\*(Aq, $file or die "$!\en";
\&    set_file_mode($fh);
\&    my @content = read_glob_content($fh);
\&    my $content = read_glob_content($fh);
\&
\&
\&    use Dancer2::FileUtils qw/open_file/;
\&
\&    my $fh = open_file(\*(Aq<\*(Aq, $file) or die $message;
\&
\&
\&    use Dancer2::FileUtils \*(Aqset_file_mode\*(Aq;
\&
\&    set_file_mode($fh);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Dancer2::FileUtils includes a few file related utilities that Dancer2
uses internally. Developers may use it instead of writing their own
file reading subroutines or using additional modules.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS "my $path = path( 'folder', 'folder', 'filename');"
.el .SS "my \f(CW$path\fP = path( 'folder', 'folder', 'filename');"
.IX Subsection "my $path = path( 'folder', 'folder', 'filename');"
Provides comfortable path resolution, internally using File::Spec. 'path'
does not verify paths, it just normalizes the path.
.ie n .SS "my $path = path_or_empty('folder, 'folder','filename');"
.el .SS "my \f(CW$path\fP = path_or_empty('folder, 'folder','filename');"
.IX Subsection "my $path = path_or_empty('folder, 'folder','filename');"
Like path, but returns '' if path doesn't exist.
.SS "dirname"
.IX Subsection "dirname"
.Vb 1
\&    use Dancer2::FileUtils \*(Aqdirname\*(Aq;
\&
\&    my $dir = dirname($path);
.Ve
.PP
Exposes File::Basename's \fIdirname\fR, to allow fetching a directory name from
a path. On most \s-1OS,\s0 returns all but last level of file path. See
File::Basename for details.
.SS "set_file_mode($fh);"
.IX Subsection "set_file_mode($fh);"
.Vb 1
\&    use Dancer2::FileUtils \*(Aqset_file_mode\*(Aq;
\&
\&    set_file_mode($fh);
.Ve
.PP
Applies charset setting from Dancer2's configuration. Defaults to utf\-8 if no
charset setting.
.ie n .SS "my $fh = open_file('<', $file) or die $message;"
.el .SS "my \f(CW$fh\fP = open_file('<', \f(CW$file\fP) or die \f(CW$message\fP;"
.IX Subsection "my $fh = open_file('<', $file) or die $message;"
.Vb 2
\&    use Dancer2::FileUtils \*(Aqopen_file\*(Aq;
\&    my $fh = open_file(\*(Aq<\*(Aq, $file) or die $message;
.Ve
.PP
Calls open and returns a filehandle. Takes in account the 'charset' setting
from Dancer2's configuration to open the file in the proper encoding (or
defaults to utf\-8 if setting not present).
.ie n .SS "my $content = read_file_content($file);"
.el .SS "my \f(CW$content\fP = read_file_content($file);"
.IX Subsection "my $content = read_file_content($file);"
.Vb 1
\&    use Dancer2::FileUtils \*(Aqread_file_content\*(Aq;
\&
\&    my @content = read_file_content($file);
\&    my $content = read_file_content($file);
.Ve
.PP
Returns either the content of a file (whose filename is the input), or \fIundef\fR
if the file could not be opened.
.PP
In array context it returns each line (as defined by $/) as a separate element;
in scalar context returns the entire contents of the file.
.ie n .SS "my $content = read_glob_content($fh);"
.el .SS "my \f(CW$content\fP = read_glob_content($fh);"
.IX Subsection "my $content = read_glob_content($fh);"
.Vb 1
\&    use Dancer2::FileUtils \*(Aqread_glob_content\*(Aq;
\&
\&    open my $fh, \*(Aq<\*(Aq, $file or die "$!\en";
\&    binmode $fh, \*(Aq:encoding(utf\-8)\*(Aq;
\&    my @content = read_glob_content($fh);
\&    my $content = read_glob_content($fh);
.Ve
.PP
Similar to \fIread_file_content\fR, only it accepts a file handle. It is
assumed that the appropriate PerlIO layers are applied to the file handle.
Returns the content and \fBcloses the file handle\fR.
.ie n .SS "my $norm_path=normalize_path ($path);"
.el .SS "my \f(CW$norm_path\fP=normalize_path ($path);"
.IX Subsection "my $norm_path=normalize_path ($path);"
.ie n .SS "my $escaped_filename = escape_filename( $filename );"
.el .SS "my \f(CW$escaped_filename\fP = escape_filename( \f(CW$filename\fP );"
.IX Subsection "my $escaped_filename = escape_filename( $filename );"
Escapes characters in a filename that may alter a path when concatenated.
.PP
.Vb 1
\&  use Dancer2::FileUtils \*(Aqescape_filename\*(Aq;
\&
\&  my $safe = escape_filename( "a/../b.txt" ); # a+2f+2e+2e+2fb+2etxt
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
Nothing by default. You can provide a list of subroutines to import.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dancer Core Developers
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2022 by Alexis Sukrieh.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
