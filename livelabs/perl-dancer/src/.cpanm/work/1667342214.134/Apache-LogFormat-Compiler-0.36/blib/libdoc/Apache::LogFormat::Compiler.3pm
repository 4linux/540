.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Apache::LogFormat::Compiler 3pm"
.TH Apache::LogFormat::Compiler 3pm "2019-11-16" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Apache::LogFormat::Compiler \- Compile a log format string to perl\-code
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Apache::LogFormat::Compiler;
\&
\&  my $log_handler = Apache::LogFormat::Compiler\->new("combined");
\&  my $log = $log_handler\->log_line(
\&      $env,
\&      $res,
\&      $length,
\&      $reqtime,
\&      $time
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Compile a log format string to perl-code. For faster generation of access_log lines.
.SH "METHOD"
.IX Header "METHOD"
.IP "new($fmt:String)" 4
.IX Item "new($fmt:String)"
Takes a format string (or a preset template \f(CW\*(C`combined\*(C'\fR or \f(CW\*(C`custom\*(C'\fR)
to specify the log format. This module implements a subset of
Apache's LogFormat templates <http://httpd.apache.org/docs/2.0/mod/mod_log_config.html>:
.Sp
.Vb 10
\&   %%    a percent sign
\&   %h    REMOTE_ADDR from the PSGI environment, or \-
\&   %l    remote logname not implemented (currently always \-)
\&   %u    REMOTE_USER from the PSGI environment, or \-
\&   %t    [local timestamp, in default format]
\&   %r    REQUEST_METHOD, REQUEST_URI and SERVER_PROTOCOL from the PSGI environment
\&   %s    the HTTP status code of the response
\&   %b    content length of the response
\&   %T    custom field for handling times in subclasses
\&   %D    custom field for handling sub\-second times in subclasses
\&   %v    SERVER_NAME from the PSGI environment, or \-
\&   %V    HTTP_HOST or SERVER_NAME from the PSGI environment, or \-
\&   %p    SERVER_PORT from the PSGI environment
\&   %P    the worker\*(Aqs process id
\&   %m    REQUEST_METHOD from the PSGI environment
\&   %U    PATH_INFO from the PSGI environment
\&   %q    QUERY_STRING from the PSGI environment
\&   %H    SERVER_PROTOCOL from the PSGI environment
.Ve
.Sp
In addition, custom values can be referenced, using \f(CW\*(C`%{name}\*(C'\fR,
with one of the mandatory modifier flags \f(CW\*(C`i\*(C'\fR, \f(CW\*(C`o\*(C'\fR or \f(CW\*(C`t\*(C'\fR:
.Sp
.Vb 3
\&   %{variable\-name}i    HTTP_VARIABLE_NAME value from the PSGI environment
\&   %{header\-name}o      header\-name header in the response
\&   %{time\-format]t      localtime in the specified strftime format
.Ve
.ie n .IP "log_line($env:HashRef, $res:ArrayRef, $length:Integer, $reqtime:Integer, $time:Integer): $log:String" 4
.el .IP "log_line($env:HashRef, \f(CW$res:ArrayRef\fR, \f(CW$length:Integer\fR, \f(CW$reqtime:Integer\fR, \f(CW$time:Integer\fR): \f(CW$log:String\fR" 4
.IX Item "log_line($env:HashRef, $res:ArrayRef, $length:Integer, $reqtime:Integer, $time:Integer): $log:String"
Generates log line.
.Sp
.Vb 5
\&  $env      PSGI env request HashRef
\&  $res      PSGI response ArrayRef
\&  $length   Content\-Length
\&  $reqtime  The time taken to serve request in microseconds. optional
\&  $time     Time the request was received. optional. If $time is undefined. current timestamp is used.
.Ve
.Sp
Sample psgi
.Sp
.Vb 3
\&  use Plack::Builder;
\&  use Time::HiRes;
\&  use Apache::LogFormat::Compiler;
\&
\&  my $log_handler = Apache::LogFormat::Compiler\->new(
\&      \*(Aq%h %l %u %t "%r" %>s %b "%{Referer}i" "%{User\-agent}i" %D\*(Aq
\&  );
\&  my $compile_log_app = builder {
\&      enable sub {
\&          my $app = shift;
\&          sub {
\&              my $env = shift;
\&              my $t0 = [gettimeofday];
\&              my $res = $app\->();
\&              my $reqtime = int(Time::HiRes::tv_interval($t0) * 1_000_000);
\&              $env\->{psgi.error}\->print($log_handler\->log_line(
\&                  $env,$res,6,$reqtime, $t0\->[0]));
\&          }
\&      };
\&      $app
\&  };
.Ve
.SH "ABOUT POSIX::strftime::Compiler"
.IX Header "ABOUT POSIX::strftime::Compiler"
This module uses POSIX::strftime::Compiler for generate datetime string. POSIX::strftime::Compiler provides \s-1GNU C\s0 library compatible \fBstrftime\fR\|(3). But this module will not affected by the system locale. This feature is useful when you want to write loggers, servers and portable applications.
.SH "ADD CUSTOM FORMAT STRING"
.IX Header "ADD CUSTOM FORMAT STRING"
Apache::LogFormat::Compiler allows one to add a custom format string
.PP
.Vb 10
\&  my $log_handler = Apache::LogFormat::Compiler\->new(
\&      \*(Aq%z %{HTTP_X_FORWARDED_FOR|REMOTE_ADDR}Z\*(Aq,
\&      char_handlers => +{
\&          \*(Aqz\*(Aq => sub {
\&              my ($env,$req) = @_;
\&              return $env\->{HTTP_X_FORWARDED_FOR};
\&          }
\&      },
\&      block_handlers => +{
\&          \*(AqZ\*(Aq => sub {
\&              my ($block,$env,$req) = @_;
\&              # block eq \*(AqHTTP_X_FORWARDED_FOR|REMOTE_ADDR\*(Aq
\&              my ($main, $alt) = split(\*(Aq\e|\*(Aq, $args);
\&              return exists $env\->{$main} ? $env\->{$main} : $env\->{$alt};
\&          }
\&      },
\&  );
.Ve
.PP
Any single letter can be used, other than those already defined by Apache::LogFormat::Compiler.
Your sub is called with two or three arguments: the content inside the \f(CW\*(C`{}\*(C'\fR
from the format (block_handlers only), the \s-1PSGI\s0 environment (\f(CW$env\fR),
and the ArrayRef of the response. It should return the string to be logged.
.SH "AUTHOR"
.IX Header "AUTHOR"
Masahiro Nagano <kazeburo@gmail.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Plack::Middleware::AccessLog, <http://httpd.apache.org/docs/2.2/mod/mod_log_config.html>
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) Masahiro Nagano
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
