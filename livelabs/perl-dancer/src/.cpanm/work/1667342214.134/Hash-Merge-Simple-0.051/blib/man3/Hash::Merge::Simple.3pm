.\" Automatically generated by Pod::Man 4.12 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Hash::Merge::Simple 3"
.TH Hash::Merge::Simple 3 "2010-12-07" "perl v5.30.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Hash::Merge::Simple \- Recursively merge two or more hashes, simply
.SH "VERSION"
.IX Header "VERSION"
version 0.051
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Hash::Merge::Simple qw/ merge /;
\&
\&    my $a = { a => 1 };
\&    my $b = { a => 100, b => 2};
\&
\&    # Merge with righthand hash taking precedence
\&    my $c = merge $a, $b;
\&    # $c is { a => 100, b => 2 } ... Note: a => 100 has overridden => 1
\&
\&    # Also, merge will take care to recursively merge any subordinate hashes found
\&    my $a = { a => 1, c => 3, d => { i => 2 }, r => {} };
\&    my $b = { b => 2, a => 100, d => { l => 4 } };
\&    my $c = merge $a, $b;
\&    # $c is { a => 100, b => 2, c => 3, d => { i => 2, l => 4 }, r => {} }
\&
\&    # You can also merge more than two hashes at the same time 
\&    # The precedence increases from left to right (the rightmost has the most precedence)
\&    my $everything = merge $this, $that, $mine, $yours, $kitchen_sink, ...;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Hash::Merge::Simple will recursively merge two or more hashes and return the result as a new hash reference. The merge function will descend and merge
hashes that exist under the same node in both the left and right hash, but doesn't attempt to combine arrays, objects, scalars, or anything else. The rightmost hash
also takes precedence, replacing whatever was in the left hash if a conflict occurs.
.PP
This code was pretty much taken straight from Catalyst::Utils, and modified to handle more than 2 hashes at the same time.
.SH "USAGE"
.IX Header "USAGE"
.SS "Hash::Merge::Simple\->merge( <hash1>, <hash2>, <hash3>, ..., <hashN> )"
.IX Subsection "Hash::Merge::Simple->merge( <hash1>, <hash2>, <hash3>, ..., <hashN> )"
.SS "Hash::Merge::Simple::merge( <hash1>, <hash2>, <hash3>, ..., <hashN> )"
.IX Subsection "Hash::Merge::Simple::merge( <hash1>, <hash2>, <hash3>, ..., <hashN> )"
Merge <hash1> through <hashN>, with the nth-most (rightmost) hash taking precedence.
.PP
Returns a new hash reference representing the merge.
.PP
\&\s-1NOTE:\s0 The code does not currently check for cycles, so infinite loops are possible:
.PP
.Vb 3
\&    my $a = {};
\&    $a\->{b} = $a;
\&    merge $a, $a;
.Ve
.PP
\&\s-1NOTE:\s0 If you want to avoid giving/receiving side effects with the merged result, use \f(CW\*(C`clone_merge\*(C'\fR or \f(CW\*(C`dclone_merge\*(C'\fR
An example of this problem (thanks Uri):
.PP
.Vb 2
\&    my $left = { a => { b => 2 } } ;
\&    my $right = { c => 4 } ;
\&
\&    my $result = merge( $left, $right ) ;
\&
\&    $left\->{a}{b} = 3 ;
\&    $left\->{a}{d} = 5 ;
\&
\&    # $result\->{a}{b} == 3 !
\&    # $result\->{a}{d} == 5 !
.Ve
.SS "Hash::Merge::Simple\->clone_merge( <hash1>, <hash2>, <hash3>, ..., <hashN> )"
.IX Subsection "Hash::Merge::Simple->clone_merge( <hash1>, <hash2>, <hash3>, ..., <hashN> )"
.SS "Hash::Merge::Simple::clone_merge( <hash1>, <hash2>, <hash3>, ..., <hashN> )"
.IX Subsection "Hash::Merge::Simple::clone_merge( <hash1>, <hash2>, <hash3>, ..., <hashN> )"
Perform a merge, clone the merge, and return the result
.PP
This is useful in cases where you need to ensure that the result can be tweaked without fear
of giving/receiving any side effects
.PP
This method will use Clone to do the cloning
.SS "Hash::Merge::Simple\->dclone_merge( <hash1>, <hash2>, <hash3>, ..., <hashN> )"
.IX Subsection "Hash::Merge::Simple->dclone_merge( <hash1>, <hash2>, <hash3>, ..., <hashN> )"
.SS "Hash::Merge::Simple::dclone_merge( <hash1>, <hash2>, <hash3>, ..., <hashN> )"
.IX Subsection "Hash::Merge::Simple::dclone_merge( <hash1>, <hash2>, <hash3>, ..., <hashN> )"
Perform a merge, clone the merge, and return the result
.PP
This is useful in cases where you need to ensure that the result can be tweaked without fear
of giving/receiving any side effects
.PP
This method will use Storable (dclone) to do the cloning
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Hash::Merge
.PP
Catalyst::Utils
.PP
Clone
.PP
Storable
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
This code was pretty much taken directly from Catalyst::Utils:
.PP
Sebastian Riedel \f(CW\*(C`sri@cpan.org\*(C'\fR
.PP
Yuval Kogman \f(CW\*(C`nothingmuch@woobling.org\*(C'\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert Krimen <robertkrimen@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010 by Robert Krimen.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
